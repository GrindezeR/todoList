{"version":3,"sources":["state/todolist_reducer.ts","state/task_reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","components/Task/Task.tsx","components/Todolist/Todolist.tsx","App.tsx","reportWebVitals.ts","store/store.ts","index.tsx","components/Todolist/Todolist.module.css","App.module.css","components/AddItemForm/AddItemForm.module.css","components/EditableSpan/EditableSpan.module.css","components/Task/Task.module.css"],"names":["initialState","AddItemForm","React","memo","props","title","callback","useState","inputValue","setInputValue","error","setError","addButton","value","trim","className","s","wrapper","addItemWrapper","TextField","input","id","label","variant","onChange","e","currentTarget","onKeyPress","key","IconButton","onClick","color","size","AddCircle","EditableSpan","editMode","setEditMode","disableEditMode","onBlur","autoFocus","task","onDoubleClick","Task","todolistId","changeTaskStatus","changeTaskTitle","deleteTask","isDone","deleteTaskHandler","useCallback","changeTaskStatusHandler","changeTaskTitleCallback","done","Checkbox","checked","Delete","Todolist","tasks","filter","addTask","changeTodolistFilter","deleteTodolist","changeTodolistTitle","filteredTasks","t","tasksList","map","allStyle","activeStyle","completeStyle","allFilterHandler","activeFilterHandler","completeFilterHandler","deleteTodolistHandler","changeTodolistTitleCallback","addTaskCallback","DeleteForever","tasksWrapper","btnWrapper","Button","filterBtn","App","dispatch","useDispatch","useEffect","todolistFromLS","localStorage","getItem","type","todolist","JSON","parse","taskFromLS","setTasksFromLocalStorageAC","todolists","useSelector","state","setItem","stringify","taskId","deleteTaskAC","changeTaskStatusAC","addTaskAC","changeTaskTitleAC","changeTodolistTitleAC","filterValue","changeTodolistFilterAC","addTodolist","v1","addTodolistAC","deleteTodolistAC","todolistList","tl","tasksForTodolist","Grid","item","Paper","todolistWrapper","elevation","mainApp","AppBar","position","Toolbar","edge","sx","mr","Typography","component","flexGrow","Container","todolistsContainer","fixed","addTodolistWrapper","container","todoWrapper","spacing","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","copyState","store","createStore","window","ReactDOM","render","StrictMode","StyledEngineProvider","injectFirst","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.7a086bd8.chunk.js","sourcesContent":["import {FiltersValueType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type InitialTodolistStateType = {\r\n    id: string\r\n    title: string\r\n    filter: FiltersValueType\r\n}\r\n\r\nconst initialState: InitialTodolistStateType[] = []\r\n\r\nexport const todolistReducer = (state = initialState, action: ActionsType): InitialTodolistStateType[] => {\r\n    switch (action.type) {\r\n        case \"CHANGE-TODOLIST-FILTER\":\r\n            return state.map(tl => tl.id === action.todolistId ? {...tl, filter: action.filter} : tl);\r\n        case \"ADD-TODOLIST\":\r\n            return [...state, {id: action.todolistId, title: action.title, filter: 'all'}]\r\n        case \"DELETE-TODOLIST\":\r\n            return state.filter(tl => tl.id !== action.todolistId);\r\n        case \"CHANGE-TODOLIST-TITLE\":\r\n            return state.map(tl => tl.id === action.todolistId ? {...tl, title: action.title} : tl);\r\n        case \"TODOLIST-LOCALSTORAGE\":\r\n            return action.todolist.map(tl => ({...tl, filter: 'all'}));\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionsType = filterTodolistActionType | addTodolistActionType | deleteTodolistActionType\r\n    | changeTodolistTitleActionType | setTodolistFromLocalStorageActionType\r\n\r\ntype filterTodolistActionType = ReturnType<typeof changeTodolistFilterAC>;\r\nexport type addTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type deleteTodolistActionType = ReturnType<typeof deleteTodolistAC>;\r\nexport type changeTodolistTitleActionType = ReturnType<typeof changeTodolistTitleAC>;\r\nexport type setTodolistFromLocalStorageActionType = ReturnType<typeof setTodolistFromLocalStorageAC>;\r\n\r\nexport const changeTodolistFilterAC = (todolistId: string, filter: FiltersValueType) => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', todolistId, filter} as const\r\n}\r\nexport const addTodolistAC = (title: string) => {\r\n    return {type: 'ADD-TODOLIST', title, todolistId: v1()} as const\r\n}\r\nexport const deleteTodolistAC = (todolistId: string) => {\r\n    return {type: 'DELETE-TODOLIST', todolistId} as const\r\n}\r\nexport const changeTodolistTitleAC = (todolistId: string, title: string) => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', todolistId, title} as const\r\n}\r\n\r\nexport const setTodolistFromLocalStorageAC = (todolist: InitialTodolistStateType[]) => {\r\n    return {type: 'TODOLIST-LOCALSTORAGE', todolist} as const\r\n}","import {TaskType} from \"../App\";\r\nimport {addTodolistActionType, deleteTodolistActionType} from \"./todolist_reducer\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type InitialTaskStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\n\r\nconst initialState: InitialTaskStateType = {}\r\n\r\nexport const taskReducer = (state = initialState, action: ActionsType): InitialTaskStateType => {\r\n    switch (action.type) {\r\n        case \"DELETE-TASK\":\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)\r\n            }\r\n        case \"CHANGE-TASK-STATUS\":\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {\r\n                    ...t,\r\n                    isDone: !t.isDone\r\n                } : t)\r\n            }\r\n        case \"ADD-TASK\":\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: [\r\n                    {id: v1(), title: action.title, isDone: false}, ...state[action.todolistId]\r\n                ]\r\n            }\r\n        case \"CHANGE-TASK-TITLE\":\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {\r\n                    ...t,\r\n                    title: action.title\r\n                } : t)\r\n            }\r\n        case \"ADD-TODOLIST\":\r\n            return {...state, [action.todolistId]: []}\r\n        case \"DELETE-TODOLIST\":\r\n            let copyState = {...state};\r\n            delete copyState[action.todolistId];\r\n            return copyState;\r\n        case \"TASKS-LOCALSTORAGE\":\r\n            return action.tasks;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype ActionsType = deleteTaskActionType | changeTaskStatusActionType | addTodolistActionType\r\n    | addTaskActionType | deleteTodolistActionType | changeTaskTitleActionType\r\n    | setTasksFromLocalStorageActionType\r\n\r\ntype deleteTaskActionType = ReturnType<typeof deleteTaskAC>;\r\ntype changeTaskStatusActionType = ReturnType<typeof changeTaskStatusAC>;\r\ntype addTaskActionType = ReturnType<typeof addTaskAC>;\r\ntype changeTaskTitleActionType = ReturnType<typeof changeTaskTitleAC>;\r\ntype setTasksFromLocalStorageActionType = ReturnType<typeof setTasksFromLocalStorageAC>;\r\n\r\nexport const deleteTaskAC = (todolistId: string, taskId: string) => {\r\n    return {type: 'DELETE-TASK', todolistId, taskId} as const\r\n}\r\n\r\nexport const changeTaskStatusAC = (todolistId: string, taskId: string) => {\r\n    return {type: 'CHANGE-TASK-STATUS', todolistId, taskId} as const\r\n}\r\n\r\nexport const addTaskAC = (todolistId: string, title: string) => {\r\n    return {type: 'ADD-TASK', todolistId, title} as const\r\n}\r\nexport const changeTaskTitleAC = (todolistId: string, taskId: string, title: string) => {\r\n    return {type: 'CHANGE-TASK-TITLE', todolistId, taskId, title} as const\r\n}\r\n\r\nexport const setTasksFromLocalStorageAC = (tasks: InitialTaskStateType) => {\r\n    return {type: 'TASKS-LOCALSTORAGE', tasks} as const\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport s from './AddItemForm.module.css';\r\nimport {IconButton, TextField} from \"@mui/material\";\r\nimport {AddCircle} from \"@mui/icons-material\";\r\n\r\ntype AddItemFormPropsType = {\r\n    title?: string\r\n    callback: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    const {title, callback} = props\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [error, setError] = useState(false);\r\n\r\n    const inputChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (error) {\r\n            setError(false);\r\n        }\r\n        setInputValue(e.currentTarget.value);\r\n    }\r\n\r\n    const addButton = () => {\r\n        const value = inputValue.trim();\r\n        if (value !== '') {\r\n            callback(value);\r\n            setInputValue('');\r\n        } else {\r\n            setError(true);\r\n        }\r\n    }\r\n\r\n    const onKeyPressAdd = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addButton();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <h3>{title}</h3>\r\n            <div className={s.addItemWrapper}>\r\n                <TextField className={s.input}\r\n                           error={error}\r\n                           id={'standard-basic'}\r\n                           label={'Insert name'}\r\n                           variant={\"standard\"}\r\n                           value={inputValue}\r\n                           onChange={inputChangeHandler}\r\n                           onKeyPress={onKeyPressAdd}\r\n                />\r\n                <IconButton onClick={addButton} color={'primary'} size={\"small\"}>\r\n                    <AddCircle/>\r\n                </IconButton>\r\n            </div>\r\n            {error && <div className={s.error}>Title is required!</div>}\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default AddItemForm;","import TextField from \"@mui/material/TextField/TextField\";\r\nimport React, {ChangeEvent, useState, KeyboardEvent} from \"react\";\r\nimport s from './EditableSpan.module.css';\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    callback: (title: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    const {title, callback} = props\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [inputValue, setInputValue] = useState(title);\r\n\r\n    const inputChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setInputValue(e.currentTarget.value);\r\n    const enableEditMode = () => {\r\n        setEditMode(true);\r\n    }\r\n    const disableEditMode = () => {\r\n        const value = inputValue.trim();\r\n        if (value !== '') {\r\n            callback(value);\r\n        } else {\r\n            setInputValue(title); //If string = void, return latest value\r\n        }\r\n        setInputValue(value.trim()) //Clear spaces after edit\r\n        setEditMode(false);\r\n    }\r\n    const onKeyPressEdit = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            disableEditMode();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {editMode ?\r\n                <TextField className={s.input}\r\n                           size={\"small\"}\r\n                           variant={\"outlined\"}\r\n                           value={inputValue}\r\n                           onBlur={disableEditMode}\r\n                           onChange={inputChangeHandler}\r\n                           onKeyPress={onKeyPressEdit}\r\n                           autoFocus\r\n\r\n                />\r\n                :\r\n                <span className={s.task}\r\n                      onDoubleClick={enableEditMode}>\r\n                    {title}\r\n                </span>}\r\n        </>\r\n    );\r\n});","import React, {useCallback} from \"react\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport s from \"./Task.module.css\";\r\nimport {TaskType} from \"../../App\";\r\nimport {Checkbox} from \"@mui/material\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport { Delete } from \"@mui/icons-material\";\r\n\r\ntype TaskPropsType = {\r\n    todolistId: string\r\n    task: TaskType\r\n\r\n    changeTaskTitle: (todolistId: string, taskId: string, title: string) => void\r\n    changeTaskStatus: (todolistId: string, taskId: string) => void\r\n    deleteTask: (todolistId: string, taskId: string) => void\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const {todolistId, task, changeTaskStatus, changeTaskTitle, deleteTask} = props\r\n    const {id, title, isDone} = task\r\n\r\n    const deleteTaskHandler = useCallback(() => {\r\n        deleteTask(todolistId, id)\r\n    }, [deleteTask, todolistId, id]);\r\n\r\n    const changeTaskStatusHandler = useCallback(() => {\r\n        changeTaskStatus(todolistId, id)\r\n    }, [changeTaskStatus, todolistId, id]);\r\n\r\n    const changeTaskTitleCallback = useCallback((title: string) => {\r\n        changeTaskTitle(todolistId, id, title)\r\n    }, [changeTaskTitle, todolistId, id]);\r\n\r\n    return (\r\n        <div className={isDone ? s.done : ''}>\r\n            <Checkbox color={'info'}\r\n                      onChange={changeTaskStatusHandler}\r\n                      checked={isDone}/>\r\n            <EditableSpan title={title} callback={changeTaskTitleCallback}/>\r\n            <IconButton size={'small'} onClick={deleteTaskHandler}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    );\r\n});","import React, {useCallback} from \"react\";\r\nimport {FiltersValueType, TaskType} from \"../../App\";\r\nimport s from './Todolist.module.css';\r\nimport {AddItemForm} from \"../AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../EditableSpan/EditableSpan\";\r\nimport {Task} from \"../Task/Task\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport {DeleteForever} from \"@mui/icons-material\";\r\nimport Button from \"@mui/material/Button\";\r\n\r\ntype TodolistPropsType = {\r\n    tasks: TaskType[]\r\n    title: string\r\n    filter: FiltersValueType\r\n    todolistId: string\r\n    deleteTodolist: (todolistId: string) => void\r\n    changeTodolistFilter: (todolistId: string, filter: FiltersValueType) => void\r\n    changeTodolistTitle: (todolistId: string, title: string) => void\r\n\r\n    addTask: (todolistId: string, title: string) => void\r\n    changeTaskTitle: (todolistId: string, taskId: string, title: string) => void\r\n    changeTaskStatus: (todolistId: string, taskId: string) => void\r\n    deleteTask: (todolistId: string, taskId: string) => void\r\n}\r\n\r\nexport const Todolist = React.memo((props: TodolistPropsType) => {\r\n    const {\r\n        tasks, title, filter,\r\n        todolistId,\r\n        deleteTask, changeTaskStatus, addTask, changeTaskTitle,\r\n        changeTodolistFilter, deleteTodolist, changeTodolistTitle,\r\n    } = props\r\n\r\n    let filteredTasks = tasks;\r\n    if (filter === 'active') {\r\n        filteredTasks = tasks.filter(t => !t.isDone);\r\n    }\r\n    if (filter === \"completed\") {\r\n        filteredTasks = tasks.filter(t => t.isDone);\r\n    }\r\n\r\n    const tasksList = filteredTasks.map(t => {\r\n        return (\r\n            <Task key={t.id}\r\n                  task={t}\r\n                  todolistId={todolistId}\r\n                  changeTaskTitle={changeTaskTitle}\r\n                  changeTaskStatus={changeTaskStatus}\r\n                  deleteTask={deleteTask}/>\r\n        );\r\n    })\r\n\r\n    //Styles\r\n    const allStyle = filter === 'all' ? 'contained' : 'text';\r\n    const activeStyle = filter === 'active' ? 'contained' : 'text';\r\n    const completeStyle = filter === 'completed' ? 'contained' : 'text';\r\n\r\n    //Callbacks\r\n    const allFilterHandler = useCallback(() => {\r\n        changeTodolistFilter(todolistId, 'all')\r\n    }, [changeTodolistFilter, todolistId]);\r\n\r\n    const activeFilterHandler = useCallback(() => {\r\n        changeTodolistFilter(todolistId, 'active')\r\n    }, [changeTodolistFilter, todolistId]);\r\n\r\n    const completeFilterHandler = useCallback(() => {\r\n        changeTodolistFilter(todolistId, 'completed')\r\n    }, [changeTodolistFilter, todolistId]);\r\n\r\n    const deleteTodolistHandler = useCallback(() => {\r\n        deleteTodolist(todolistId)\r\n    }, [deleteTodolist, todolistId]);\r\n\r\n    const changeTodolistTitleCallback = useCallback((title: string) => {\r\n        changeTodolistTitle(todolistId, title)\r\n    }, [changeTodolistTitle, todolistId]);\r\n\r\n    const addTaskCallback = useCallback((title: string) => {\r\n        addTask(todolistId, title)\r\n    }, [addTask, todolistId]);\r\n\r\n    return (\r\n        <div key={todolistId} className={s.wrapper}>\r\n            <h3 className={s.title}>\r\n                <EditableSpan title={title} callback={changeTodolistTitleCallback}/>\r\n                <IconButton onClick={deleteTodolistHandler}>\r\n                    <DeleteForever color={'error'}/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm callback={addTaskCallback}/>\r\n            <div className={s.tasksWrapper}>{tasksList}</div>\r\n            <div className={s.btnWrapper}>\r\n                <Button title={'All'}\r\n                        className={s.filterBtn}\r\n                        color={\"info\"}\r\n                        variant={allStyle}\r\n                        onClick={allFilterHandler}>All\r\n                </Button>\r\n\r\n                <Button title={'Active'}\r\n                        className={s.filterBtn}\r\n                        color={\"warning\"}\r\n                        variant={activeStyle}\r\n                        onClick={activeFilterHandler}>Active\r\n                </Button>\r\n\r\n                <Button title={'All'}\r\n                        className={s.filterBtn}\r\n                        color={\"success\"}\r\n                        variant={completeStyle}\r\n                        onClick={completeFilterHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n});","import React, {useCallback, useEffect} from 'react';\nimport AppBar from '@mui/material/AppBar';\nimport Grid from '@mui/material/Grid';\nimport Paper from '@mui/material/Paper';\nimport Container from '@mui/material/Container';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\nimport IconButton from '@mui/material/IconButton';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport {\n    addTodolistAC,\n    changeTodolistTitleAC, deleteTodolistAC,\n    changeTodolistFilterAC,\n    InitialTodolistStateType, setTodolistFromLocalStorageAC\n} from \"./state/todolist_reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {\n    addTaskAC,\n    changeTaskStatusAC,\n    changeTaskTitleAC,\n    deleteTaskAC,\n    InitialTaskStateType, setTasksFromLocalStorageAC\n} from \"./state/task_reducer\";\nimport {AppRootStateType} from \"./store/store\";\nimport {AddItemForm} from './components/AddItemForm/AddItemForm';\nimport {Todolist} from './components/Todolist/Todolist';\nimport s from './App.module.css';\nimport {useMediaQuery} from \"@mui/material\";\n\n\nexport type FiltersValueType = 'all' | 'active' | 'completed'\nexport type TaskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\n\nfunction App() {\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        let todolistFromLS = localStorage.getItem('todolists');\n        if (todolistFromLS) {\n            dispatch(setTodolistFromLocalStorageAC(JSON.parse(todolistFromLS)));\n        }\n        let taskFromLS = localStorage.getItem('tasks');\n        if (taskFromLS) {\n            dispatch(setTasksFromLocalStorageAC(JSON.parse(taskFromLS)));\n        }\n    }, [dispatch])\n\n    const todolists = useSelector<AppRootStateType, InitialTodolistStateType[]>(state => state.todolists);\n    const tasks = useSelector<AppRootStateType, InitialTaskStateType>(state => state.tasks);\n\n\n    useEffect(() => {\n        localStorage.setItem('todolists', JSON.stringify(todolists));\n    }, [todolists])\n\n    useEffect(() => {\n        localStorage.setItem('tasks', JSON.stringify(tasks));\n    }, [tasks])\n\n    //Tasks Functions\n    const deleteTask = useCallback((todolistId: string, taskId: string) => {\n        dispatch(deleteTaskAC(todolistId, taskId));\n    }, [dispatch]);\n    const changeTaskStatus = useCallback((todolistId: string, taskId: string) => {\n        dispatch(changeTaskStatusAC(todolistId, taskId));\n    }, [dispatch]);\n    const addTask = useCallback((todolistId: string, title: string) => {\n        dispatch(addTaskAC(todolistId, title));\n    }, [dispatch])\n    const changeTaskTitle = useCallback((todolistId: string, taskId: string, title: string) => {\n        dispatch(changeTaskTitleAC(todolistId, taskId, title));\n    }, [dispatch]);\n\n    //Todolists Functions\n    const changeTodolistTitle = useCallback((todolistId: string, title: string) => {\n        dispatch(changeTodolistTitleAC(todolistId, title));\n    }, [dispatch]);\n    const changeTodolistFilter = useCallback((todolistId: string, filterValue: FiltersValueType) => {\n        dispatch(changeTodolistFilterAC(todolistId, filterValue));\n    }, [dispatch]);\n    const addTodolist = useCallback((title: string) => {\n        dispatch(addTodolistAC(title));\n    }, [dispatch]);\n    const deleteTodolist = useCallback((todolistId: string) => {\n        dispatch(deleteTodolistAC(todolistId));\n    }, [dispatch]);\n\n\n    const todolistList = todolists.map(tl => {\n        const tasksForTodolist = tasks[tl.id];\n\n        return (\n            <Grid key={tl.id} item>\n                <Paper className={s.todolistWrapper} elevation={5}>\n                    <Todolist todolistId={tl.id}\n                              tasks={tasksForTodolist}\n                              title={tl.title}\n                              filter={tl.filter}\n\n                              changeTodolistTitle={changeTodolistTitle}\n                              deleteTodolist={deleteTodolist}\n                              changeTodolistFilter={changeTodolistFilter}\n                              changeTaskTitle={changeTaskTitle}\n                              addTask={addTask}\n                              changeTaskStatus={changeTaskStatus}\n                              deleteTask={deleteTask}/>\n                </Paper>\n            </Grid>\n        );\n    })\n\n    return (\n        <div className={s.mainApp}>\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton\n                        size=\"large\"\n                        edge=\"start\"\n                        color=\"inherit\"\n                        aria-label=\"menu\"\n                        sx={{mr: 2}}>\n                        <MenuIcon/>\n                    </IconButton>\n                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\n                        Todolist\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n\n            <Container className={s.todolistsContainer} fixed>\n                <Grid className={s.addTodolistWrapper} container>\n                    <AddItemForm title={'Add list'} callback={addTodolist}/>\n                </Grid>\n                <Grid className={s.todoWrapper} container spacing={4}>\n                    {todolistList}\n                </Grid>\n            </Container>\n        </div>\n    );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from \"redux\";\r\nimport {taskReducer} from \"../state/task_reducer\";\r\nimport {todolistReducer} from \"../state/todolist_reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistReducer,\r\n    tasks: taskReducer\r\n});\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\r\n\r\nexport const store = createStore(rootReducer);\r\n\r\n// store.subscribe(() => {\r\n//     console.log('TASKS', store.getState().tasks);\r\n//     console.log('TODOLISTS', store.getState().todolists);\r\n// });\r\n\r\n//@ts-ignore\r\nwindow.store = store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {StyledEngineProvider} from '@mui/material';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n\n        <Provider store={store}>\n            <StyledEngineProvider injectFirst>\n                <App/>\n            </StyledEngineProvider>\n        </Provider>\n\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Todolist_wrapper__3zpNK\",\"tasksWrapper\":\"Todolist_tasksWrapper__1yF8x\",\"btnWrapper\":\"Todolist_btnWrapper__P1oYm\",\"deleteBtn\":\"Todolist_deleteBtn__UBS97\",\"title\":\"Todolist_title__1m9d9\",\"filterBtn\":\"Todolist_filterBtn__3ujEA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainApp\":\"App_mainApp__2g3cs\",\"todolistWrapper\":\"App_todolistWrapper__32sfF\",\"todolistsContainer\":\"App_todolistsContainer__36Kbh\",\"addTodolistWrapper\":\"App_addTodolistWrapper__18EMb\",\"todoWrapper\":\"App_todoWrapper__2XxrH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addItemWrapper\":\"AddItemForm_addItemWrapper__3xczE\",\"error\":\"AddItemForm_error__r1ap8\",\"input\":\"AddItemForm_input__3S4CR\",\"errorInput\":\"AddItemForm_errorInput__3SbG3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"EditableSpan_input__y3r8A\",\"task\":\"EditableSpan_task__iU_zk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"deleteBtn\":\"Task_deleteBtn__3PyXM\",\"done\":\"Task_done__RzDSB\"};"],"sourceRoot":""}