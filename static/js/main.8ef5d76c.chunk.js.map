{"version":3,"sources":["components/EditableSpan.tsx","components/AddItemForm.tsx","components/TodoList.tsx","state/todolist-reducer.ts","state/task-reducer.ts","App.tsx","reportWebVitals.ts","index.tsx","components/TodoList.module.css","components/EditableSpan.module.css"],"names":["EditableSpan","title","callback","useState","editMode","setEditMode","inputValue","setInputValue","activateViewMode","TextField","className","s","input","size","variant","value","onBlur","onChange","e","currentTarget","onKeyPress","key","autoFocus","onDoubleClick","AddItemForm","titleList","setTitle","error","setError","addTask","trim","id","label","helperText","IconButton","onClick","color","AddCircle","TodoList","tasks","filter","todolistID","props","taskList","map","t","isDone","done","removeTask","Delete","Checkbox","changeTaskStatus","checked","changeTaskTitle","filterChangeFunction","changeFilter","styleAll","styleActive","styleCompleted","changeTitleTodolist","deleteTodolist","DeleteForever","tasksWrapper","Button","filterBtn","todolistReducer","state","action","type","tl","taskReducer","taskID","v1","status","newTitle","App","todolistID1","todolistID2","useReducer","todolist","dispatchTodolist","dispatchTasks","useEffect","localTasksString","localStorage","getItem","newTasksValue","JSON","parse","localTodolistsString","newTodolistsValue","returnNewStateTodolistAC","setItem","stringify","removeTaskAC","addTaskAC","changeStatus","taskId","changeStatusTaskAC","changeTitleTaskAC","deleteTodolistAC","todolistList","tasksForTodolist","Grid","item","Paper","elevation","AppBar","position","Toolbar","edge","aria-label","sx","mr","Typography","component","flexGrow","Container","fixed","container","newID","addTodolistAC","spacing","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","StyledEngineProvider","injectFirst","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.8ef5d76c.chunk.js","sourcesContent":["import React, {ChangeEvent, useState, KeyboardEvent} from \"react\";\r\nimport {TextField} from \"@mui/material\";\r\nimport s from './EditableSpan.module.css';\r\n\r\ntype editableSpan = {\r\n    title: string\r\n    callback: (newTitle: string) => void\r\n}\r\n\r\nexport function EditableSpan({title, callback}: editableSpan) {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [inputValue, setInputValue] = useState<string>('')\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setInputValue(title);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        callback(inputValue);\r\n    }\r\n    const onEnterAdd = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            activateViewMode();\r\n        }\r\n    }\r\n    const onChangeInputValue = (e: ChangeEvent<HTMLInputElement>) => setInputValue(e.currentTarget.value);\r\n\r\n    return (\r\n        editMode\r\n            ?\r\n            <TextField className={s.input}\r\n                       size={\"small\"}\r\n                       variant={\"standard\"}\r\n                       value={inputValue}\r\n                       onBlur={activateViewMode}\r\n                       onChange={onChangeInputValue}\r\n                       onKeyPress={onEnterAdd}\r\n                       autoFocus/>\r\n            :\r\n            <span onDoubleClick={activateEditMode}> {title} </span>\r\n    );\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport s from \"./AddItemForm.module.css\";\r\nimport {Button, IconButton, TextField} from \"@mui/material\";\r\nimport {AddBox, AddCircle} from \"@mui/icons-material\";\r\n\r\ntype addItemPropsType = {\r\n    titleList?: string\r\n    callback: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm({callback, titleList}: addItemPropsType) {\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>('')\r\n\r\n    //Functions\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.key === 'Enter') {\r\n            addTask();\r\n        }\r\n    }\r\n    const addTask = () => {\r\n        if (title.trim() !== \"\") {\r\n            callback(title.trim());\r\n            setTitle(\"\");\r\n        } else {\r\n            setError('Title is required!');\r\n        }\r\n    }\r\n\r\n    // Styles\r\n    const styleBtn = {\r\n        minWidth: '40px',\r\n        height: '48px',\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>{titleList}</h3>\r\n            <TextField\r\n                error={!!error}\r\n                id={'standard-basic'}\r\n                label={'Insert name'}\r\n                variant={\"standard\"}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                helperText={error}\r\n            />\r\n            {/*<Button style={styleBtn} variant={\"contained\"} size={\"small\"} onClick={addTask}>+</Button>*/}\r\n            <IconButton onClick={addTask} color={'primary'}>\r\n                <AddCircle/>\r\n            </IconButton>\r\n        </div>\r\n    );\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {Button, Checkbox, IconButton} from \"@mui/material\";\r\nimport {filterValuesType,taskType} from '../App';\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport s from './TodoList.module.css';\r\nimport {Delete, DeleteForever} from \"@mui/icons-material\";\r\n\r\ntype PropsType = {\r\n    title: string\r\n    tasks: Array<taskType>\r\n    filter: filterValuesType\r\n    todolistID: string\r\n    removeTask: (todolistID: string, taskId: string) => void\r\n    changeFilter: (todolistID: string, value: filterValuesType) => void\r\n    addTask: (todolistID: string, title: string) => void\r\n    changeTaskStatus: (todolistID: string, taskId: string, isDone: boolean) => void\r\n    deleteTodolist: (todolistID: string) => void\r\n    changeTaskTitle: (todolistID: string, taskId: string, newTitle: string) => void\r\n    changeTitleTodolist: (todolistID: string, newTitle: string) => void\r\n}\r\n\r\nexport function TodoList({tasks, filter, todolistID, ...props}: PropsType) {\r\n    //Create lists\r\n    const taskList = tasks.map(t => {\r\n        const onClickHandler = () => props.removeTask(todolistID, t.id)\r\n        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            props.changeTaskStatus(todolistID, t.id, e.currentTarget.checked);\r\n        }\r\n\r\n        const onChangeTitleHandler = (inputValue: string) => {\r\n            props.changeTaskTitle(todolistID, t.id, inputValue);\r\n        }\r\n\r\n        return <div key={t.id} className={t.isDone ? s.done : s.tasks}>\r\n            <IconButton size={\"small\"} onClick={onClickHandler}>\r\n                <Delete/>\r\n            </IconButton>\r\n            <Checkbox color={'info'}\r\n                      onChange={onChangeHandler}\r\n                      checked={t.isDone}/>\r\n            <EditableSpan title={t.title} callback={onChangeTitleHandler}/>\r\n\r\n        </div>\r\n    })\r\n\r\n    //Funcitons\r\n    const onClickRemoveTodolist = () => props.deleteTodolist(todolistID);\r\n    const filterChangeFunction = (filter: filterValuesType) => props.changeFilter(todolistID, filter);\r\n    const onChangeTitleTodolistHandler = (inputValue: string) => {\r\n        props.changeTitleTodolist(todolistID, inputValue);\r\n    }\r\n    const callBackAddItem = (title: string) => {\r\n        props.addTask(todolistID, title);\r\n    }\r\n\r\n    const filterAll = () => filterChangeFunction('all');\r\n    const filterActive = () => filterChangeFunction('active');\r\n    const filterCompleted = () => filterChangeFunction('completed');\r\n\r\n    //Styles\r\n    const styleAll = filter === 'all' ? 'contained' : 'text';\r\n    const styleActive = filter === 'active' ? 'contained' : 'text';\r\n    const styleCompleted = filter === 'completed' ? 'contained' : 'text';\r\n\r\n    return (\r\n        <div>\r\n            <h3 className={s.title}>\r\n                <EditableSpan title={props.title} callback={onChangeTitleTodolistHandler}/>\r\n                <IconButton onClick={onClickRemoveTodolist}>\r\n                    <DeleteForever color={'error'}/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm callback={callBackAddItem}/>\r\n            <div className={s.tasksWrapper}>{taskList}</div>\r\n            <div>\r\n                <Button title={'All'}\r\n                        className={s.filterBtn}\r\n                        color={\"success\"}\r\n                        variant={styleAll}\r\n                        onClick={filterAll}>All\r\n                </Button>\r\n\r\n                <Button title={'Active'}\r\n                        className={s.filterBtn}\r\n                        color={\"success\"}\r\n                        variant={styleActive}\r\n                        onClick={filterActive}>Active\r\n                </Button>\r\n\r\n                <Button title={'Completed'}\r\n                        className={s.filterBtn}\r\n                        color={\"success\"}\r\n                        variant={styleCompleted}\r\n                        onClick={filterCompleted}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import {filterValuesType, todolistsType} from \"../App\";\r\n\r\nexport const todolistReducer = (state: todolistsType[], action: actionTypes): todolistsType[] => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST':\r\n            return [...state].filter(tl => tl.id !== action.todolistID);\r\n        case 'ADD-TODOLIST':\r\n            return [...state, {id: action.id, title: action.title, filter: \"all\"}];\r\n        case \"CHANGE-TITLE-TODOLIST\":\r\n            return [...state].map(tl => tl.id === action.id ? {...tl, title: action.title} : tl);\r\n        case \"CHANGE-FILTER-TODOLIST\":\r\n            return [...state].map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl);\r\n        case \"RETURN-NEW-STATE-TODOLIST\":\r\n            return [...action.state];\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype actionTypes = deleteTodolistACType\r\n    | addTodolistACType\r\n    | changeTodolistACType\r\n    | changeFilterTodolistACType\r\n    | returnNewStateACType\r\n\r\ntype deleteTodolistACType = ReturnType<typeof deleteTodolistAC>;\r\ntype addTodolistACType = ReturnType<typeof addTodolistAC>;\r\ntype changeTodolistACType = ReturnType<typeof changeTitleTodolistAC>;\r\ntype changeFilterTodolistACType = ReturnType<typeof changeFilterTodolistAC>;\r\ntype returnNewStateACType = ReturnType<typeof returnNewStateTodolistAC>;\r\n\r\nexport const deleteTodolistAC = (todolistID: string) => {\r\n    return {type: 'REMOVE-TODOLIST', todolistID} as const\r\n}\r\n\r\nexport const addTodolistAC = (title: string, id: string) => {\r\n    return {type: 'ADD-TODOLIST', title, id} as const\r\n}\r\n\r\nexport const changeTitleTodolistAC = (title: string, id: string) => {\r\n    return {type: 'CHANGE-TITLE-TODOLIST', title, id} as const\r\n}\r\n\r\nexport const changeFilterTodolistAC = (filter: filterValuesType, id: string) => {\r\n    return {type: 'CHANGE-FILTER-TODOLIST', filter, id} as const\r\n}\r\n\r\nexport const returnNewStateTodolistAC = (state: todolistsType[]) => {\r\n    return {type: 'RETURN-NEW-STATE-TODOLIST', state} as const\r\n}\r\n\r\n","import {ObjTasksType, taskType} from \"../App\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport const taskReducer = (state: ObjTasksType, action: actionsTypes): ObjTasksType => {\r\n    switch (action.type) {\r\n        case \"REMOVE-TASK\":\r\n            return {\r\n                ...state,\r\n                [action.todolistID]: state[action.todolistID].filter(t => t.id !== action.taskID)\r\n            };\r\n        case \"ADD-TASK\":\r\n            return {\r\n                ...state,\r\n                [action.todolistID]: [{id: v1(), title: action.title, isDone: false},\r\n                    ...state[action.todolistID]]\r\n            };\r\n        case \"CHANGE-STATUS-TASK\":\r\n            return {\r\n                ...state,\r\n                [action.todolistID]: [...state[action.todolistID]\r\n                    .map(t => t.id === action.taskID ? {...t, isDone: action.status} : t)]\r\n            };\r\n        case \"CHANGE-TITLE-TASK\":\r\n            return {\r\n                ...state,\r\n                [action.todolistID]: [...state[action.todolistID]\r\n                    .map(t => t.id === action.taskID ? {...t, title: action.newTitle} : t)]\r\n            };\r\n        case \"ADD-TASK-LIST\":\r\n            return {...state, [action.id]: []};\r\n        case \"RETURN-NEW-STATE-TASK\":\r\n            return {...action.state};\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\ntype actionsTypes = removeTaskACType\r\n    | addTaskACType\r\n    | changeStatusTaskACType\r\n    | changeTitleTaskACType\r\n    | returnNewStateTasktACType\r\n    | addTaskListACType\r\n\r\ntype removeTaskACType = ReturnType<typeof removeTaskAC>;\r\ntype addTaskACType = ReturnType<typeof addTaskAC>;\r\ntype changeStatusTaskACType = ReturnType<typeof changeStatusTaskAC>;\r\ntype changeTitleTaskACType = ReturnType<typeof changeTitleTaskAC>;\r\ntype returnNewStateTasktACType = ReturnType<typeof returnNewStateTasktAC>;\r\ntype addTaskListACType = ReturnType<typeof addTaskListAC>;\r\n\r\nexport const removeTaskAC = (todolistID: string, taskID: string) => {\r\n    return {type: 'REMOVE-TASK', todolistID, taskID} as const\r\n}\r\n\r\nexport const addTaskAC = (todolistID: string, title: string) => {\r\n    return {type: 'ADD-TASK', todolistID, title} as const\r\n}\r\n\r\nexport const changeStatusTaskAC = (todolistID: string, taskID: string, status: boolean) => {\r\n    return {type: 'CHANGE-STATUS-TASK', todolistID, taskID, status} as const\r\n}\r\n\r\nexport const changeTitleTaskAC = (todolistID: string, taskID: string, newTitle: string) => {\r\n    return {type: 'CHANGE-TITLE-TASK', todolistID, taskID, newTitle} as const\r\n}\r\n\r\nexport const returnNewStateTasktAC = (state: ObjTasksType) => {\r\n    return {type: 'RETURN-NEW-STATE-TASK', state} as const\r\n}\r\n\r\nexport const addTaskListAC = (id: string) => {\r\n    return {type: 'ADD-TASK-LIST', id} as const\r\n}","import React, {useEffect, useReducer, useState} from 'react';\nimport './App.css';\nimport {TodoList} from \"./components/TodoList\";\nimport {v1} from 'uuid';\nimport {AddItemForm} from \"./components/AddItemForm\";\nimport AppBar from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\nimport IconButton from '@mui/material/IconButton';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport {Container, Grid, Paper} from \"@mui/material\";\nimport {\n    todolistReducer,\n    deleteTodolistAC,\n    addTodolistAC,\n    changeTitleTodolistAC,\n    changeFilterTodolistAC, returnNewStateTodolistAC\n} from \"./state/todolist-reducer\";\nimport {\n    addTaskAC, addTaskListAC,\n    changeStatusTaskAC,\n    changeTitleTaskAC,\n    removeTaskAC,\n    returnNewStateTasktAC,\n    taskReducer\n} from \"./state/task-reducer\";\n\nexport type filterValuesType = \"all\" | \"active\" | \"completed\";\nexport type todolistsType = {\n    id: string\n    title: string\n    filter: filterValuesType\n}\nexport type taskType = {\n    id: string\n    title: string\n    isDone: boolean\n}\n\nexport type ObjTasksType = { [key: string]: taskType[] }\n\nfunction App() {\n    const todolistID1 = v1();\n    const todolistID2 = v1();\n\n    const [todolist, dispatchTodolist] = useReducer(todolistReducer, [\n        {id: todolistID1, title: 'What to Learn', filter: 'all'},\n        {id: todolistID2, title: 'What to Buy', filter: 'all'}\n    ])\n\n    const [tasks, dispatchTasks] = useReducer(taskReducer, {\n        [todolistID1]: [\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\n            {id: v1(), title: \"JS\", isDone: true},\n            {id: v1(), title: \"ReactJS\", isDone: false},\n            {id: v1(), title: \"Rest API\", isDone: false},\n            {id: v1(), title: \"GraphQL\", isDone: false},\n        ],\n        [todolistID2]: [\n            {id: v1(), title: \"Bread\", isDone: true},\n            {id: v1(), title: \"Beer\", isDone: true},\n            {id: v1(), title: \"Water\", isDone: true},\n            {id: v1(), title: \"Meat\", isDone: false},\n            {id: v1(), title: \"Milk\", isDone: false},\n        ]\n    });\n\n    useEffect(() => {\n        let localTasksString = localStorage.getItem('tasks');\n        if (localTasksString) {\n            let newTasksValue = JSON.parse(localTasksString);\n            dispatchTasks(returnNewStateTasktAC(newTasksValue));\n        }\n\n        let localTodolistsString = localStorage.getItem('todolists');\n        if (localTodolistsString) {\n            let newTodolistsValue = JSON.parse(localTodolistsString);\n            dispatchTodolist(returnNewStateTodolistAC(newTodolistsValue));\n        }\n    }, [])\n    useEffect(() => {\n        localStorage.setItem('tasks', JSON.stringify(tasks));\n    }, [tasks])\n    useEffect(() => {\n        localStorage.setItem('todolists', JSON.stringify(todolist));\n    }, [todolist])\n\n    const removeTask = (todolistID: string, id: string) => {\n        dispatchTasks(removeTaskAC(todolistID, id));\n    }\n    const addTask = (todolistID: string, title: string) => {\n        dispatchTasks(addTaskAC(todolistID, title));\n    }\n    const changeStatus = (todolistID: string, taskId: string, isDone: boolean) => {\n        dispatchTasks(changeStatusTaskAC(todolistID, taskId, isDone));\n    }\n    const changeTaskTitle = (todolistID: string, taskId: string, newTitle: string) => {\n        dispatchTasks(changeTitleTaskAC(todolistID, taskId, newTitle));\n    }\n\n    //Todolists Functions\n    const changeFilter = (todolistID: string, value: filterValuesType) => {\n        dispatchTodolist(changeFilterTodolistAC(value, todolistID));\n    }\n    const changeTitleTodolist = (todolistID: string, newTitle: string) => {\n        dispatchTodolist(changeTitleTodolistAC(newTitle, todolistID));\n    }\n    const deleteTodolist = (todolistID: string) => {\n        dispatchTodolist(deleteTodolistAC(todolistID));\n    }\n    const addTodolist = (title: string) => {\n        const newID = v1();\n        dispatchTodolist(addTodolistAC(title, newID));\n        dispatchTasks(addTaskListAC(newID));\n    }\n\n    const todolistList = todolist.map(tl => {\n        let tasksForTodolist = tasks[tl.id];\n        if (tl.filter === \"active\") {\n            tasksForTodolist = tasks[tl.id].filter(t => !t.isDone);\n        }\n        if (tl.filter === \"completed\") {\n            tasksForTodolist = tasks[tl.id].filter(t => t.isDone);\n        }\n\n        return (\n            <Grid item>\n                <Paper className={'todolistWrapper'} elevation={5}>\n                    <TodoList title={tl.title}\n                              key={tl.id}\n                              todolistID={tl.id}\n                              tasks={tasksForTodolist}\n                              removeTask={removeTask}\n                              changeFilter={changeFilter}\n                              addTask={addTask}\n                              changeTaskStatus={changeStatus}\n                              changeTaskTitle={changeTaskTitle}\n                              filter={tl.filter}\n                              deleteTodolist={deleteTodolist}\n                              changeTitleTodolist={changeTitleTodolist}\n                    />\n                </Paper>\n            </Grid>\n        );\n    })\n\n    return (\n        <div className=\"App\">\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton\n                        size=\"large\"\n                        edge=\"start\"\n                        color=\"inherit\"\n                        aria-label=\"menu\"\n                        sx={{mr: 2}}>\n                        <MenuIcon/>\n                    </IconButton>\n                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\n                        Todolist\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n\n            <Container fixed>\n                <Grid className={'addTodolistWrapper'} container>\n                    <AddItemForm titleList={'Add list'} callback={addTodolist}/>\n                </Grid>\n\n                <Grid container spacing={4}>\n                    {todolistList}\n                </Grid>\n            </Container>\n        </div>\n    );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {StyledEngineProvider} from '@mui/material';\n\nReactDOM.render(\n    <React.StrictMode>\n        <StyledEngineProvider injectFirst>\n            <App/>\n        </StyledEngineProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tasksWrapper\":\"TodoList_tasksWrapper__2T3Fx\",\"done\":\"TodoList_done__2xzE1\",\"tasks\":\"TodoList_tasks__VZNFe\",\"filterBtn\":\"TodoList_filterBtn__1zjB6\",\"title\":\"TodoList_title__1CgMk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"EditableSpan_input__2jJaF\"};"],"sourceRoot":""}