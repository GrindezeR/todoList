{"version":3,"sources":["features/TodolistsList/Todolist/Task/Task.module.css","api/todolist-api.ts","utils/error-utils.ts","features/TodolistsList/todolist_reducer.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/task_reducer.ts","app/store.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackBar/ErrorSnackBar.tsx","features/Login/Login.tsx","app/App.tsx","reportWebVitals.ts","index.tsx","features/TodolistsList/Todolist/Todolist.module.css","features/Login/Login.module.css","components/AddItemForm/AddItemForm.module.css","app/App.module.css","features/TodolistsList/TodolistsList.module.css","components/EditableSpan/EditableSpan.module.css"],"names":["module","exports","TasksStatuses","TasksPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","get","title","post","todolistId","delete","newTitle","put","taskId","task","authAPI","data","handleServerAppError","dispatch","setAppErrorAC","messages","setAppStatusAC","handleServerNetworkError","message","initialState","changeTodolistEntityStatusAC","entityStatus","type","isLoggedIn","setIsLoggedInAC","value","status","error","isInitialized","changeTaskEntityStatusAC","getTasksTC","then","res","tasks","setTasksAC","items","catch","err","updateTaskTC","domainModel","getState","find","t","id","deadline","description","priority","startDate","resultCode","updateTaskAC","finally","rootReducer","combineReducers","todolists","state","action","map","tl","filter","todolist","todoListId","copyState","forEach","app","auth","useAppSelector","useSelector","store","createStore","applyMiddleware","thunk","window","AddItemForm","React","memo","props","callback","useState","inputValue","setInputValue","setError","addButton","trim","className","s","wrapper","addItemWrapper","TextField","input","label","variant","onChange","e","currentTarget","onKeyPress","key","disabled","IconButton","onClick","color","size","AddCircle","EditableSpan","editMode","setEditMode","disableEditMode","onBlur","onFocus","select","autoFocus","onDoubleClick","Task","changeTaskStatus","changeTaskTitle","deleteTask","disableWhileLoading","deleteTaskHandler","useCallback","changeTaskStatusHandler","newIsDoneValue","checked","Completed","New","changeTaskTitleCallback","done","Checkbox","Delete","Todolist","demo","addTask","changeTodolistFilter","deleteTodolist","changeTodolistTitle","useEffect","filteredTasks","tasksList","allFilterHandler","activeFilterHandler","completeFilterHandler","deleteTodolistHandler","changeTodolistTitleCallback","addTaskCallback","allStyle","activeStyle","completeStyle","colorDeleteBtn","DeleteForever","tasksWrapper","btnWrapper","Button","filterBtn","TodolistsList","useDispatch","deleteTaskAC","deleteTaskTC","item","addTaskTC","changeTodolistTitleAC","changeTodolistTitleTC","filterValue","changeTodolistFilterAC","addTodolist","addTodolistTC","deleteTodolistAC","deleteTodolistTC","to","todolistList","tasksForTodolist","Grid","Paper","todolistWrapper","elevation","addItemFormWrapper","container","listWrapper","spacing","Alert","ref","ErrorSnackBar","onCloseHandler","event","reason","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","initialValues","email","password","rememberMe","onSubmit","values","resetForm","validate","errors","test","length","loginWrapper","justifyContent","FormControl","handleSubmit","FormGroup","inputs","margin","getFieldProps","touched","FormControlLabel","control","App","mainApp","AppBar","position","Toolbar","edge","mr","Typography","component","flexGrow","LinearProgress","loadingBar","Container","todolistsContainer","fixed","path","element","style","textAlign","marginTop","top","CircularProgress","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","StyledEngineProvider","injectFirst","document","getElementById"],"mappings":"yFACAA,EAAOC,QAAU,CAAC,UAAY,wBAAwB,KAAO,qB,kEC2GjDC,EAOAC,E,mLA/GNC,E,OAAWC,EAAMC,OAAO,CAC1BC,QAAS,gDACTC,iBAAiB,EACjBC,QAAS,CACL,UAAW,0CAINC,EAAc,WAGnB,OAAON,EAASO,IAAT,eAHFD,EAAc,SAKRE,GACX,OAAOR,EAASS,KACf,aAAc,CAACD,MAAOA,KAPlBF,EAAc,SASRI,GACX,OAAOV,EAASW,OAAT,qBACQD,KAXVJ,EAAc,SAaRI,EAAoBE,GAC/B,OAAOZ,EAASa,IAAT,qBACQH,GAAc,CAACF,MAAOI,KAfhCN,EAAc,SAmBdI,GACL,OAAOV,EAASO,IAAT,qBACQG,EADR,YApBFJ,EAAc,SAuBZI,EAAoBF,GAC3B,OAAOR,EAASS,KAAT,qBACQC,EADR,UAC4B,CAACF,MAAOA,KAzBtCF,EAAc,SA2BZI,EAAoBI,GAC3B,OAAOd,EAASW,OAAT,qBAA4CD,EAA5C,kBAAgEI,KA5BlER,EAAc,SA8BZI,EAAoBI,EAAgBC,GAC3C,OAAOf,EAASa,IAAT,qBACQH,EADR,kBAC4BI,GAAUC,IAIxCC,EAAU,SACbC,GACF,OAAOjB,EAASS,KAAT,aACQQ,IAHVD,EAAU,WAMf,OAAOhB,EAASW,OAAT,eANFK,EAAU,WASf,OAAOhB,EAASO,IAAT,a,SAmDHT,O,aAAAA,I,2BAAAA,I,yBAAAA,I,kBAAAA,M,cAOAC,O,aAAAA,I,mBAAAA,I,WAAAA,I,uBAAAA,I,kBAAAA,M,KC7GL,IAAMmB,EAAuB,SAAID,EAAuBE,GAAsC,IAAD,EAChGA,EAASC,EAAa,UAACH,EAAKI,SAAS,UAAf,QAAqB,kBAC3CF,EAASG,EAAe,YAGfC,EAA2B,SAACC,EAAiBL,GACtDA,EAASC,EAAcI,IACvBL,EAASG,EAAe,YCLtBG,EAAqC,GA4C9BC,EACT,SAAChB,EAAoBiB,GACjB,MAAO,CAACC,KAAM,gCAAiClB,aAAYiB,iBC/C7DF,EAAe,CACjBI,YAAY,GAeHC,EAAkB,SAACC,GAAD,MAAqB,CAACH,KAAM,wBAAyBG,UCf9EN,EAAe,CACjBO,OAAQ,OACRC,MAAO,GACPC,eAAe,GAoBNZ,EAAiB,SAACU,GAAD,MAAgC,CAACJ,KAAM,iBAAkBI,WAC1EZ,EAAgB,SAACa,GAAD,MAA2B,CAACL,KAAM,gBAAiBK,UClB1ER,EAA+B,GAkFxBU,EAA2B,SAACzB,EAAoBI,EAAgBa,GACzE,MAAO,CAACC,KAAM,4BAA6BlB,aAAYI,SAAQa,iBAItDS,EAAa,SAAC1B,GACvB,OAAO,SAACS,GACJA,EAASG,EAAe,YACxBhB,EAAqBI,GAChB2B,MAAK,SAAAC,GACFnB,EAhBU,SAACT,EAAoB6B,GAC3C,MAAO,CAACX,KAAM,YAAaW,QAAO7B,cAeb8B,CAAW9B,EAAY4B,EAAIrB,KAAKwB,QACzCtB,EAASG,EAAe,iBAE3BoB,OAAM,SAACC,GACJpB,EAAyBoB,EAAInB,QAASL,QA8CzCyB,EACT,SAAClC,EAAoBI,EAAgB+B,GACjC,OAAO,SAAC1B,EAAqC2B,GACzC,IAAI/B,EAAO+B,IAAWP,MAAM7B,GAAYqC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,KAAOnC,KAEvDC,IACAI,EAASG,EAAe,YACxBH,EAASgB,EAAyBzB,EAAYI,EAAQ,YACtDR,EAAuBI,EAAYI,EAAnC,aACIN,MAAOO,EAAKP,MACZwB,OAAQjB,EAAKiB,OACbkB,SAAUnC,EAAKmC,SACfC,YAAapC,EAAKoC,YAClBC,SAAUrC,EAAKqC,SACfC,UAAWtC,EAAKsC,WACbR,IAEFR,MAAK,SAACC,GACyB,IAAxBA,EAAIrB,KAAKqC,YACTnC,EAlFA,SAACT,EAAoBI,EAAgB+B,GAC7D,MAAO,CAACjB,KAAM,cAAelB,aAAYI,SAAQ+B,eAiFhBU,CAAa7C,EAAYI,EAAQ+B,IAC1C1B,EAASgB,EAAyBzB,EAAYI,EAAQ,cACtDK,EAASG,EAAe,eAExBJ,EAAqBoB,EAAIrB,KAAME,MAGtCuB,OAAM,SAACC,GACJpB,EAAyBoB,EAAInB,QAASL,MAEzCqC,SAAQ,WACLrC,EAASgB,EAAyBzB,EAAYI,EAAQ,e,SClLxE2C,EAAcC,YAAgB,CAChCC,UJKA,WAA8E,IAA7EC,EAA4E,uDAApEnC,EAAcoC,EAAsD,uCACzE,OAAQA,EAAOjC,MACX,IAAK,yBACD,OAAOgC,EAAME,KAAI,SAAAC,GAAE,OAAIA,EAAGd,KAAOY,EAAOnD,WAAjB,2BAAkCqD,GAAlC,IAAsCC,OAAQH,EAAOG,SAAUD,KAC1F,IAAK,eACD,MAAM,CAAN,2BAAYF,EAAOI,UAAnB,IAA6BD,OAAQ,MAAOrC,aAAc,UAA1D,mBAAsEiC,IAC1E,IAAK,kBACD,OAAOA,EAAMI,QAAO,SAAAD,GAAE,OAAIA,EAAGd,KAAOY,EAAOnD,cAC/C,IAAK,wBACD,OAAOkD,EAAME,KAAI,SAAAC,GAAE,OAAIA,EAAGd,KAAOY,EAAOnD,WAAjB,2BAAkCqD,GAAlC,IAAsCvD,MAAOqD,EAAOrD,QAASuD,KACxF,IAAK,gBACD,OAAOF,EAAOF,UAAUG,KAAI,SAAAC,GAAE,kCAASA,GAAT,IAAaC,OAAQ,MAAOrC,aAAc,YAC5E,IAAK,gCACD,OAAOiC,EAAME,KAAI,SAAAC,GAAE,OAAIA,EAAGd,KAAOY,EAAOnD,WAAjB,2BACfqD,GADe,IACXpC,aAAckC,EAAOlC,eAAgBoC,KACrD,IAAK,uBACD,MAAO,GACX,QACI,OAAOH,IItBnBrB,MDwBA,WAAoE,IAAnEqB,EAAkE,uDAA1DnC,EAAcoC,EAA4C,uCAC/D,OAAQA,EAAOjC,MACX,IAAK,cACD,OAAO,2BACAgC,GADP,kBAEKC,EAAOnD,WAAakD,EAAMC,EAAOnD,YAAYsD,QAAO,SAAAhB,GAAC,OAAIA,EAAEC,KAAOY,EAAO/C,YAElF,IAAK,WACD,OAAO,2BACA8C,GADP,kBAEKC,EAAO9C,KAAKmD,WAFjB,CAE+BL,EAAO9C,MAFtC,mBAE+C6C,EAAMC,EAAO9C,KAAKmD,gBAErE,IAAK,cACD,OAAO,2BACAN,GADP,kBAEKC,EAAOnD,WAAakD,EAAMC,EAAOnD,YAC7BoD,KAAI,SAAAd,GAAC,OAAIA,EAAEC,KAAOY,EAAO/C,OAAhB,2BAA6BkC,GAAMa,EAAOhB,aAAeG,OAE/E,IAAK,YACD,OAAO,2BAAIY,GAAX,kBAAmBC,EAAOnD,WAAamD,EAAOtB,QAClD,IAAK,4BACD,OAAO,2BACAqB,GADP,kBAEKC,EAAOnD,WAAakD,EAAMC,EAAOnD,YAAYoD,KAAI,SAAAd,GAAC,OAAIA,EAAEC,KAAOY,EAAO/C,OAAhB,2BAChDkC,GADgD,IAEnDrB,aAAckC,EAAOlC,eACrBqB,OAEZ,IAAK,eACD,OAAO,2BAAEa,EAAOI,SAAShB,GAAK,IAAOW,GACzC,IAAK,kBACD,IAAIO,EAAS,eAAOP,GAEpB,cADOO,EAAUN,EAAOnD,YACjByD,EAEX,IAAK,gBACD,IAAIA,EAAS,eAAOP,GAIpB,OAHAC,EAAOF,UAAUS,SAAQ,SAAAL,GACrBI,EAAUJ,EAAGd,IAAM,MAEhBkB,EAEX,IAAK,uBACD,MAAO,GACX,QACI,OAAOP,ICpEnBS,IFKsB,WAAuF,IAAtFT,EAAqF,uDAA3DnC,EAAcoC,EAA6C,uCAC5G,OAAQA,EAAOjC,MACX,IAAK,iBACD,OAAO,2BAAIgC,GAAX,IAAkB5B,OAAQ6B,EAAO7B,SACrC,IAAK,gBACD,OAAO,2BAAI4B,GAAX,IAAkB3B,MAAO4B,EAAO5B,QACpC,IAAK,qBACD,OAAO,2BAAI2B,GAAX,IAAkB1B,eAAe,IACrC,QACI,OAAO0B,IEbfU,KHAuB,WAAwF,IAAvFV,EAAsF,uDAA5DnC,EAAcoC,EAA8C,uCAC9G,MACS,0BADDA,EAAOjC,KAEA,2BAAIgC,GAAX,IAAkB/B,WAAYgC,EAAO9B,QAE9B6B,KGQNW,EAAyDC,IACzDC,EAAQC,YAAYjB,EAAakB,YAAgBC,MAQ9DC,OAAOJ,MAAQA,E,mICvBFK,GAAcC,IAAMC,MAAK,SAACC,GACnC,IAAOzE,EAAmByE,EAAnBzE,MAAO0E,EAAYD,EAAZC,SACd,EAAoCC,mBAAS,IAA7C,oBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAA0BF,oBAAS,GAAnC,oBAAOlD,EAAP,KAAcqD,EAAd,KASMC,EAAY,WACd,IAAMxD,EAAQqD,EAAWI,OACX,KAAVzD,GACAmD,EAASnD,GACTsD,EAAc,KAEdC,GAAS,IAUjB,OACI,uBAAKG,UAAWC,KAAEC,QAAlB,UACI,8BAAKnF,IACL,uBAAKiF,UAAWC,KAAEE,eAAlB,UACI,eAACC,GAAA,EAAD,CAAWJ,UAAWC,KAAEI,MACb7D,MAAOA,EACPgB,GAAI,iBACJ8C,MAAO,cACPC,QAAS,WACTjE,MAAOqD,EACPa,SAjCI,SAACC,GACpBjE,GACAqD,GAAS,GAEbD,EAAca,EAAEC,cAAcpE,QA8BXqE,WAjBD,SAACF,GACL,UAAVA,EAAEG,KACFd,KAgBee,SAAUrB,EAAMqB,WAE3B,eAACC,EAAA,EAAD,CAAYC,QAASjB,EAAWkB,MAAO,UAC3BC,KAAM,QACNJ,SAAUrB,EAAMqB,SAF5B,SAGI,eAACK,GAAA,EAAD,SAGP1E,GAAS,sBAAKwD,UAAWC,KAAEzD,MAAlB,sC,oBCjDT2E,GAAe7B,IAAMC,MAAK,SAACC,GACpC,IAAOzE,EAA6ByE,EAA7BzE,MAAO0E,EAAsBD,EAAtBC,SAAUoB,EAAYrB,EAAZqB,SAExB,EAAgCnB,oBAAS,GAAzC,oBAAO0B,EAAP,KAAiBC,EAAjB,KACA,EAAoC3B,mBAAS3E,GAA7C,oBAAO4E,EAAP,KAAmBC,EAAnB,KAQM0B,EAAkB,WACpB,IAAMhF,EAAQqD,EAAWI,OAEX,KAAVzD,GAAgBvB,IAAUuB,EAC1BmD,EAASnD,GAETsD,EAAc7E,GAElB6E,EAActD,EAAMyD,QACpBsB,GAAY,IAQhB,OACI,qCACKD,EACG,eAAChB,GAAA,EAAD,CAAWJ,UAAWC,KAAEI,MACbY,KAAM,QACNV,QAAS,WACTjE,MAAOqD,EACP4B,OAAQD,EACRd,SA/BI,SAACC,GAAD,OAAsCb,EAAca,EAAEC,cAAcpE,QAgCxEqE,WAfA,SAACF,GACN,UAAVA,EAAEG,KACFU,KAceE,QAAS,SAAAf,GAAC,OAAIA,EAAEC,cAAce,UAC9BC,WAAS,IAIpB,uBAAM1B,UAAWC,KAAE3E,KACbqG,cAtCK,YACF,IAAbd,GACAQ,GAAY,IAmCR,SAEKtG,S,yCCxCR6G,GAAOtC,IAAMC,MAAK,SAACC,GAC5B,IAAOvE,EAAmEuE,EAAnEvE,WAAYK,EAAuDkE,EAAvDlE,KAAMuG,EAAiDrC,EAAjDqC,iBAAkBC,EAA+BtC,EAA/BsC,gBAAiBC,EAAcvC,EAAduC,WACrDvE,EAAmClC,EAAnCkC,GAAIzC,EAA+BO,EAA/BP,MAAOwB,EAAwBjB,EAAxBiB,OAAQL,EAAgBZ,EAAhBY,aAEpB8F,EAAuC,YAAjB9F,EACtB+F,EAAoBC,uBAAY,WAClCH,EAAW9G,EAAYuC,KACxB,CAACuE,EAAY9G,EAAYuC,IAEtB2E,EAA0BD,uBAAY,SAACzB,GACzC,IAAI2B,EAAiB3B,EAAEC,cAAc2B,QACrCR,EAAiB5G,EAAYuC,EAAI4E,EAC7B/H,EAAciI,UAAYjI,EAAckI,OAC7C,CAACV,EAAkB5G,EAAYuC,IAE5BgF,EAA0BN,uBAAY,SAACnH,GACzC+G,EAAgB7G,EAAYuC,EAAIzC,KACjC,CAAC+G,EAAiB7G,EAAYuC,IAEjC,OACI,uBAAKwC,UAAWzD,IAAWlC,EAAciI,UAAYrC,KAAEwC,KAAO,GAA9D,UACI,eAACC,GAAA,EAAD,CAAU1B,MAAO,OACPR,SAAU2B,EACVE,QAAS9F,IAAWlC,EAAciI,UAClCzB,SAA2B,YAAjB3E,IAEpB,eAACiF,GAAD,CAAcpG,MAAOA,EACP0E,SAAU+C,EACV3B,SAAUmB,IACxB,eAAClB,EAAA,EAAD,CAAYG,KAAM,QAASF,QAASkB,EAAmBpB,SAAUmB,EAAjE,SACI,eAACW,GAAA,EAAD,Y,sBCtBHC,GAAWtD,IAAMC,MAAK,YAAkD,IAAD,IAA/CsD,YAA+C,SAA9BrD,EAA8B,mBAE5E1C,EAGA0C,EAHA1C,MAAO0B,EAGPgB,EAHOhB,SACPuD,EAEAvC,EAFAuC,WAAYF,EAEZrC,EAFYqC,iBAAkBiB,EAE9BtD,EAF8BsD,QAAShB,EAEvCtC,EAFuCsC,gBACvCiB,EACAvD,EADAuD,qBAAsBC,EACtBxD,EADsBwD,eAAgBC,EACtCzD,EADsCyD,oBAG1CC,qBAAU,cAKP,CAACL,IAEJ,IAAMb,EAAgD,YAA1BxD,EAAStC,aAEjCiH,EAAgBrG,EACI,WAApB0B,EAASD,SACT4E,EAAgBrG,EAAMyB,QAAO,SAAAhB,GAAC,OAAIA,EAAEhB,SAAWlC,EAAckI,QAEzC,cAApB/D,EAASD,SACT4E,EAAgBrG,EAAMyB,QAAO,SAAAhB,GAAC,OAAIA,EAAEhB,SAAWlC,EAAciI,cAGjE,IAAMc,EAAYD,EAAc9E,KAAI,SAAAd,GAChC,OACI,eAACqE,GAAD,CACMtG,KAAMiC,EACNtC,WAAYuD,EAAShB,GACrBsE,gBAAiBA,EACjBD,iBAAkBA,EAClBE,WAAYA,GALPxE,EAAEC,OAUf6F,EAAmBnB,uBAAY,WACjCa,EAAqBvE,EAAShB,GAAI,SACnC,CAACuF,EAAsBvE,EAAShB,KAE7B8F,EAAsBpB,uBAAY,WACpCa,EAAqBvE,EAAShB,GAAI,YACnC,CAACuF,EAAsBvE,EAAShB,KAE7B+F,EAAwBrB,uBAAY,WACtCa,EAAqBvE,EAAShB,GAAI,eACnC,CAACuF,EAAsBvE,EAAShB,KAE7BgG,EAAwBtB,uBAAY,WACtCc,EAAexE,EAAShB,MACzB,CAACwF,EAAgBxE,EAAShB,KAEvBiG,EAA8BvB,uBAAY,SAACnH,GAC7CkI,EAAoBzE,EAAShB,GAAIzC,KAClC,CAACkI,EAAqBzE,EAAShB,KAE5BkG,EAAkBxB,uBAAY,SAACnH,GACjC+H,EAAQtE,EAAShB,GAAIzC,KACtB,CAAC+H,EAAStE,EAAShB,KAIhBmG,EAA+B,QAApBnF,EAASD,OAAmB,YAAc,OACrDqF,EAAkC,WAApBpF,EAASD,OAAsB,YAAc,OAC3DsF,EAAoC,cAApBrF,EAASD,OAAyB,YAAc,OAChEuF,EAAiB9B,EAAsB,UAAY,QAEzD,OACI,uBAAuBhC,UAAWC,KAAEC,QAApC,UACI,sBAAIF,UAAWC,KAAElF,MAAjB,UACI,eAACoG,GAAD,CAAcpG,MAAOyD,EAASzD,MAChB0E,SAAUgE,EACV5C,SAAUmB,IACxB,eAAClB,EAAA,EAAD,CAAYC,QAASyC,EACT3C,SAAUmB,EADtB,SAEI,eAAC+B,GAAA,EAAD,CAAe/C,MAAO8C,SAG9B,eAACzE,GAAD,CAAaI,SAAUiE,EAAiB7C,SAAUmB,IAClD,sBAAKhC,UAAWC,KAAE+D,aAAlB,SAAiCZ,IACjC,uBAAKpD,UAAWC,KAAEgE,WAAlB,UACI,eAACC,EAAA,EAAD,CAAQnJ,MAAO,MACPiF,UAAWC,KAAEkE,UACbnD,MAAO,OACPT,QAASoD,EACT5C,QAASsC,EAJjB,iBAOA,eAACa,EAAA,EAAD,CAAQnJ,MAAO,SACPiF,UAAWC,KAAEkE,UACbnD,MAAO,UACPT,QAASqD,EACT7C,QAASuC,EAJjB,oBAOA,eAACY,EAAA,EAAD,CAAQnJ,MAAO,MACPiF,UAAWC,KAAEkE,UACbnD,MAAO,UACPT,QAASsD,EACT9C,QAASwC,EAJjB,4BA3BE/E,EAAShB,O,SCnEd4G,GAAgB,SAAC,GAA+B,IAAD,IAA7BvB,YAA6B,SAClDzG,EAAa0C,GAAwB,SAAAX,GAAK,OAAIA,EAAMU,KAAKzC,cACzDV,EAAW2I,cACXnG,EAAYa,aAAoD,SAAAZ,GAAK,OAAIA,EAAMD,aAC/EpB,EAAQiC,aAA8C,SAAAZ,GAAK,OAAIA,EAAMrB,SAE3EoG,qBAAU,YACFL,GAASzG,GAGbV,GTyBG,SAACA,GACJA,EAASG,EAAe,YACxBhB,IACK+B,MAAK,SAAAC,GAGE,OAFAnB,EAdT,CAACS,KAAM,gBAAiB+B,UAcSrB,EAAIrB,OAC5BE,EAASG,EAAe,cACjBgB,EAAIrB,QAGlBoB,MAAK,SAAAC,GACFA,EAAI8B,SAAQ,SAAAL,GAAE,OAAI5C,EAASiB,EAAW2B,EAAGd,WAE5CP,OAAM,SAACC,GACJpB,EAAyBoB,EAAInB,QAASL,WSrC/C,CAACA,EAAUmH,EAAMzG,IAGpB,IAAM2F,EAAaG,uBAAY,SAACjH,EAAoBI,GAChDK,EN0EoB,SAACT,EAAoBI,GAC7C,OAAO,SAACK,GACJA,EAASG,EAAe,YACxBH,EAASgB,EAAyBzB,EAAYI,EAAQ,YACtDR,EAAuBI,EAAYI,GAC9BuB,MAAK,SAACC,GACyB,IAAxBA,EAAIrB,KAAKqC,YACTnC,EArCQ,SAACT,EAAoBI,GAC7C,MAAO,CAACc,KAAM,cAAelB,aAAYI,UAoChBiJ,CAAarJ,EAAYI,IAClCK,EAASG,EAAe,eAExBJ,EAAqBoB,EAAIrB,KAAME,MAGtCuB,OAAM,SAACC,GACJpB,EAAyBoB,EAAInB,QAASL,MAEzCqC,SAAQ,WACLrC,EAASgB,EAAyBzB,EAAYI,EAAQ,aM3FrDkJ,CAAatJ,EAAYI,MACnC,CAACK,IACEmG,EAAmBK,uBAAY,SAACjH,EAAoBI,EAAgBkB,GACtEb,EAASyB,EAAalC,EAAYI,EAAQ,CAACkB,cAC5C,CAACb,IACEoH,EAAUZ,uBAAY,SAACjH,EAAoBF,GAC7CW,ENyFiB,SAACT,EAAoBF,GAC1C,OAAO,SAACW,GACJA,EAASG,EAAe,YACxBhB,EAAuBI,EAAYF,GAC9B6B,MAAK,SAACC,GACyB,IAAxBA,EAAIrB,KAAKqC,YACTnC,EArDT,CAACS,KAAM,WAAYb,KAqDS,2BACZuB,EAAIrB,KAAKA,KAAKgJ,MADH,IAEd/F,WAAYxD,EACZF,MAAOA,MAEXW,EAASG,EAAe,eAExBJ,EAAqBoB,EAAIrB,KAAME,MAGtCuB,OAAM,SAACC,GACJpB,EAAyBoB,EAAInB,QAASL,OM1GrC+I,CAAUxJ,EAAYF,MAChC,CAACW,IACEoG,EAAkBI,uBAAY,SAACjH,EAAoBI,EAAgBN,GACrEW,EAASyB,EAAalC,EAAYI,EAAQ,CAACN,aAC5C,CAACW,IAGEuH,EAAsBf,uBAAY,SAACjH,EAAoBF,GACzDW,ET+D6B,SAACT,EAAoBF,GACtD,OAAO,SAACW,GACJA,EAASG,EAAe,YACxBH,EAASO,EAA6BhB,EAAY,YAClDJ,EAA2BI,EAAYF,GAClC6B,MAAK,SAACC,GACyB,IAAxBA,EAAIrB,KAAKqC,YACTnC,EA9EiB,SAACT,EAAoBF,GACtD,MAAO,CAACoB,KAAM,wBAAyBlB,aAAYF,SA6E1B2J,CAAsBzJ,EAAYF,IAC3CW,EAASO,EAA6BhB,EAAY,cAClDS,EAASG,EAAe,eAExBJ,EAAqBoB,EAAIrB,KAAME,MAGtCuB,OAAM,SAACC,GACJpB,EAAyBoB,EAAInB,QAASL,OS9ErCiJ,CAAsB1J,EAAYF,MAC5C,CAACW,IACEqH,EAAuBb,uBAAY,SAACjH,EAAoB2J,GAC1DlJ,ETpB8B,SAACT,EAAoBsD,GACvD,MAAO,CAACpC,KAAM,yBAA0BlB,aAAYsD,USmBvCsG,CAAuB5J,EAAY2J,MAC7C,CAAClJ,IACEoJ,EAAc5C,uBAAY,SAACnH,GAC7BW,ETkBqB,SAACX,GAC1B,OAAO,SAACW,GACJA,EAASG,EAAe,YACxBhB,EAA2BE,GACtB6B,MAAK,SAAAC,GAC0B,IAAxBA,EAAIrB,KAAKqC,YACTnC,EA3CT,CAACS,KAAM,eAAgBqC,SA2CS,2BAAI3B,EAAIrB,KAAKA,KAAKgJ,MAAnB,IAAyBzJ,MAAOA,MACtDW,EAASG,EAAe,eAExBJ,EAAqBoB,EAAIrB,KAAME,MAGtCuB,OAAM,SAACC,GACJpB,EAAyBoB,EAAInB,QAASL,OS/BrCqJ,CAAchK,MACxB,CAACW,IACEsH,EAAiBd,uBAAY,SAACjH,GAChCS,ETgCwB,SAACT,GAC7B,OAAO,SAACS,GACJA,EAASG,EAAe,YACxBH,EAASO,EAA6BhB,EAAY,YAClDJ,EAA2BI,GACtB2B,MAAK,SAACC,GACyB,IAAxBA,EAAIrB,KAAKqC,YACTnC,EA3DY,SAACT,GAC7B,MAAO,CAACkB,KAAM,kBAAmBlB,cA0DR+J,CAAiB/J,IAC1BS,EAASG,EAAe,eAExBJ,EAAqBoB,EAAIrB,KAAME,MAGtCuB,OAAM,SAACC,GACJpB,EAAyBoB,EAAInB,QAASL,MAEzCqC,SAAQ,WACDrC,EAASO,EAA6BhB,EAAY,aSjDrDgK,CAAiBhK,MAC3B,CAACS,IAGJ,IAAKU,EACD,OAAO,eAAC,KAAD,CAAU8I,GAAI,WAGzB,IAAMC,EAAejH,EAAUG,KAAI,SAAAC,GAC/B,IAAM8G,EAAmBtI,EAAMwB,EAAGd,IAElC,OACI,eAAC6H,GAAA,EAAD,CAAkBb,MAAI,EAAtB,SACI,eAACc,GAAA,EAAD,CAAOtF,UAAWC,KAAEsF,gBAAiBC,UAAW,EAAhD,SACI,eAAC5C,GAAD,CACIpE,SAAUF,EACVxB,MAAOsI,EACPnC,oBAAqBA,EACrBD,eAAgBA,EAChBD,qBAAsBA,EACtBjB,gBAAiBA,EACjBgB,QAASA,EACTjB,iBAAkBA,EAClBE,WAAYA,EACZc,KAAMA,OAZPvE,EAAGd,OAmBtB,OACI,uCACI,eAAC6H,GAAA,EAAD,CAAMrF,UAAWC,KAAEwF,mBAAoBC,WAAS,EAAhD,SACI,eAACrG,GAAD,CAAatE,MAAO,WAAY0E,SAAUqF,MAE9C,eAACO,GAAA,EAAD,CAAMrF,UAAWC,KAAE0F,YAAaD,WAAS,EAACE,QAAS,EAAnD,SACKT,Q,wCC7FXU,GAAQvG,cACV,SAAeE,EAAOsG,GAClB,OAAO,eAAC,KAAD,aAAUN,UAAW,EAAGM,IAAKA,EAAKvF,QAAQ,UAAaf,OAGzDuG,GAAgB,WACzB,IAAMrK,EAAW2I,cACX7H,EAAQsC,GAA8B,SAAAX,GAAK,OAAIA,EAAMS,IAAIpC,SAEzDwJ,EAAiB,SAACC,EAA8BC,GACnC,cAAXA,GAGJxK,EAASC,EAAc,QAG3B,OACI,eAACwK,GAAA,EAAD,CAAUC,aAAc,CAACC,SAAU,SAAUC,WAAY,UAC/CC,OAAQ/J,EACRgK,iBAAkB,IAClBC,QAAST,EAHnB,SAKI,eAAC,GAAD,CAAOS,QAAST,EAAgBU,SAAS,QAAQC,GAAI,CAACC,MAAO,QAA7D,SACKpK,O,4DCTJqK,GAAQ,WACjB,IAAMzK,EAAa0C,GAAwB,SAAAX,GAAK,OAAIA,EAAMU,KAAKzC,cACzDV,EAAW2I,cAGXyC,EAASC,aAAU,CACrBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,GAEhBC,SAAU,SAAAC,GVNK,IAAC7L,EUOZE,GVPYF,EUOK6L,EVNlB,SAAC3L,GACJA,EAASG,EAAe,YACxBN,EAAcC,GACToB,MAAK,SAAAC,GAC0B,IAAxBA,EAAIrB,KAAKqC,YACTnC,EAASW,GAAgB,IACzBX,EAASG,EAAe,eAExBJ,EAAqBoB,EAAIrB,KAAME,MAGtCuB,OAAM,SAACC,GAAD,OAAqBpB,EAAyBoB,EAAInB,QAASL,SUJlEoL,EAAOQ,aAEXC,SAAU,SAAAF,GACN,IAAMG,EAA0B,GAUhC,OARKH,EAAOJ,MACF,4CAA4CQ,KAAKJ,EAAOJ,SAC9DO,EAAOP,MAAQ,yBAFAO,EAAOP,MAAQ,oBAK7BI,EAAOH,SACHG,EAAOH,SAASQ,OAAS,IAAGF,EAAON,SAAW,2BADjCM,EAAON,SAAW,oBAGjCM,KAIf,OAAIpL,EACO,eAAC,KAAD,CAAU8I,GAAI,MAIrB,eAACG,GAAA,EAAD,CAAMrF,UAAWC,KAAE0H,aAAcjC,WAAS,EAACkC,eAAgB,SAA3D,SACI,gBAACvC,GAAA,EAAD,CAAMb,MAAI,EAACoD,eAAgB,SAA3B,UACI,yCACA,eAACC,GAAA,EAAD,UACI,uBAAMT,SAAUN,EAAOgB,aAAvB,SACI,gBAACC,GAAA,EAAD,WACI,eAAC3H,GAAA,EAAD,aAAWJ,UAAWC,KAAE+H,OACb1H,MAAM,QACN2H,OAAO,UACHnB,EAAOoB,cAAc,WAEnCpB,EAAOqB,QAAQlB,OAASH,EAAOU,OAAOP,OACnC,sBAAKjH,UAAWC,KAAEzD,MAAlB,SAA0BsK,EAAOU,OAAOP,QAE5C,eAAC7G,GAAA,EAAD,aAAWJ,UAAWC,KAAE+H,OACb7L,KAAK,WACLmE,MAAM,WACN2H,OAAO,UACHnB,EAAOoB,cAAc,cAEnCpB,EAAOqB,QAAQjB,UAAYJ,EAAOU,OAAON,UACtC,sBAAKlH,UAAWC,KAAEzD,MAAlB,SAA0BsK,EAAOU,OAAON,WAE5C,eAACkB,GAAA,EAAD,CAAkB9H,MAAO,cAAe+H,QACpC,eAAC3F,GAAA,EAAD,aACI1B,MAAO,WACH8F,EAAOoB,cAAc,kBAIjC,eAAChE,EAAA,EAAD,CAAQ/H,KAAM,SAAUoE,QAAS,YAAaS,MAAO,UAArD,gCCMbsH,OApEf,YAAyC,IAAD,IAA1BzF,YAA0B,SAC9BtG,EAASuC,GAAkC,SAAAX,GAAK,OAAIA,EAAMS,IAAIrC,UAC9DE,EAAgBqC,GAAwB,SAAAX,GAAK,OAAIA,EAAMS,IAAInC,iBAC3DL,EAAa0C,GAAwB,SAAAX,GAAK,OAAIA,EAAMU,KAAKzC,cACzDV,EAAW2I,cAWjB,OATAnB,qBAAU,WACNxH,GVMG,SAACA,GACJH,IACKqB,MAAK,SAAAC,GAC0B,IAAxBA,EAAIrB,KAAKqC,WACTnC,EAASW,GAAgB,IAEzBZ,EAAqBoB,EAAIrB,KAAME,GAEnCA,EAZyB,CAACS,KAAM,0BAcnCc,OAAM,SAACC,GAAD,OAAqBpB,EAAyBoB,EAAInB,QAASL,WUfvE,CAACA,IAOCe,EAWD,uBAAKuD,UAAWC,IAAEsI,QAAlB,UAEI,eAAC,GAAD,IAEA,gBAACC,EAAA,EAAD,CAAQC,SAAS,WAAjB,UACI,gBAACC,EAAA,EAAD,WACI,eAAC5H,EAAA,EAAD,CACIG,KAAK,QACL0H,KAAK,QACL3H,MAAM,UACN,aAAW,OACX2F,GAAI,CAACiC,GAAI,GALb,SAMI,eAAC,IAAD,MAEJ,eAACC,EAAA,EAAD,CAAYtI,QAAQ,KAAKuI,UAAU,MAAMnC,GAAI,CAACoC,SAAU,GAAxD,kCAGC3M,EACG,eAAC8H,EAAA,EAAD,CAAQnD,QAjCC,WACzBrF,GXMsB,SAACA,GAC3BA,EAASG,EAAe,YACxBN,IACKqB,MAAK,SAAAC,GAC0B,IAAxBA,EAAIrB,KAAKqC,YACTnC,EAASW,GAAgB,IACzBX,EDQ8B,CAACS,KAAM,yBCPrCT,EAASG,EAAe,eAExBJ,EAAqBoB,EAAIrB,KAAME,MAGtCuB,OAAM,SAACT,GACJV,EAAyBU,EAAOd,UWamBsF,MAAM,UAA7C,oBAEA,eAACkD,EAAA,EAAD,CAAQlD,MAAM,UAAd,sBAGI,YAAXzE,GAAwB,eAACyM,GAAA,EAAD,CAAgBhJ,UAAWC,IAAEgJ,WAAYjI,MAAO,eAE7E,eAACkI,EAAA,EAAD,CAAWlJ,UAAWC,IAAEkJ,mBAAoBC,OAAK,EAAjD,SACI,gBAAC,KAAD,WACI,eAAC,KAAD,CAAOC,KAAM,IAAKC,QAAS,eAAC,GAAD,CAAezG,KAAMA,MAChD,eAAC,KAAD,CAAOwG,KAAM,QAASC,QAAS,eAAC,GAAD,MAC/B,eAAC,KAAD,CAAOD,KAAM,KAAMC,QACf,sBAAKC,MAAO,CAACtB,OAAQ,YAArB,SACI,qBAAIsB,MAAO,CAACC,UAAW,SAAUC,UAAW,MAAOzI,MAAO,OAA1D,6CAxChB,sBACIuI,MAAO,CAACd,SAAU,QAASiB,IAAK,MAAOF,UAAW,SAAU5C,MAAO,QADvE,SAEI,eAAC+C,GAAA,EAAD,OC7BDC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBlN,MAAK,YAAkD,IAA/CmN,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,mBCCdO,IAASC,OACL,eAAC,IAAMC,WAAP,UACI,eAAC,IAAD,CAAUtL,MAAOA,EAAjB,SACI,eAACuL,GAAA,EAAD,CAAsBC,aAAW,EAAjC,SACI,eAAC,KAAD,UACI,eAAC,GAAD,YAMhBC,SAASC,eAAe,SAM5Bd,M,mBC1BAzP,EAAOC,QAAU,CAAC,QAAU,0BAA0B,aAAe,+BAA+B,WAAa,6BAA6B,UAAY,4BAA4B,MAAQ,wBAAwB,UAAY,8B,mBCAlOD,EAAOC,QAAU,CAAC,aAAe,4BAA4B,OAAS,sBAAsB,MAAQ,uB,mBCApGD,EAAOC,QAAU,CAAC,eAAiB,oCAAoC,MAAQ,2BAA2B,MAAQ,2BAA2B,WAAa,kC,mBCA1JD,EAAOC,QAAU,CAAC,QAAU,qBAAqB,mBAAqB,gCAAgC,WAAa,0B,mBCAnHD,EAAOC,QAAU,CAAC,gBAAkB,uCAAuC,mBAAqB,0CAA0C,YAAc,qC,mBCAxJD,EAAOC,QAAU,CAAC,MAAQ,4BAA4B,KAAO,8B","file":"static/js/main.5514208e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"deleteBtn\":\"Task_deleteBtn__1yI-W\",\"done\":\"Task_done__1VCnE\"};","import axios, {AxiosResponse} from \"axios\";\r\nimport {RequestStatusType} from \"../app/app-reducer\";\r\n\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '761e6f2b-b609-440b-9ec5-0bbc9398cba5'\r\n    }\r\n})\r\n\r\nexport const todolistAPI = {\r\n    //Todolists\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>(`todo-lists`)\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>, AxiosResponse<ResponseType<{ item: TodolistType }>>, { title: string }>\r\n        ('todo-lists', {title: title})\r\n    },\r\n    deleteTodolist(todolistId: string) {\r\n        return instance.delete<ResponseType>\r\n        (`todo-lists/${todolistId}`)\r\n    },\r\n    updateTodolist(todolistId: string, newTitle: string) {\r\n        return instance.put<ResponseType, AxiosResponse<ResponseType>, { title: string }>\r\n        (`todo-lists/${todolistId}`, {title: newTitle})\r\n    },\r\n\r\n    //Tasks\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksType>\r\n        (`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>, AxiosResponse<ResponseType<{ item: TaskType }>>, { title: string }>\r\n        (`todo-lists/${todolistId}/tasks`, {title: title})\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    updateTask(todolistId: string, taskId: string, task: UpdateTasksModelType) {\r\n        return instance.put<UpdateTasksModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>\r\n        (`todo-lists/${todolistId}/tasks/${taskId}`, task)\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseType<{ userId: number }>, AxiosResponse<ResponseType<LoginParamsType>>, LoginParamsType>\r\n        (`auth/login`, data)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`auth/login`)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<LoginParamsType>>(`auth/me`)\r\n    },\r\n}\r\n\r\n\r\n//Types\r\nexport type ResponseType<T = {}> = {\r\n    resultCode: number\r\n    fieldsErrors: string[]\r\n    messages: string[]\r\n    data: T\r\n}\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TasksStatuses\r\n    priority: TasksPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n    entityStatus: RequestStatusType\r\n}\r\nexport type UpdateTasksModelType = {\r\n    title: string\r\n    description: string\r\n    status: TasksStatuses\r\n    priority: TasksPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\nexport type GetTasksType = {\r\n    items: TaskType[]\r\n    totalCount: number\r\n    error: string\r\n}\r\n\r\nexport enum TasksStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TasksPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}","import {Dispatch} from \"redux\";\r\nimport {ResponseType} from \"../api/todolist-api\";\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../app/app-reducer\";\r\n\r\ntype ErrorUtilsDispatchType = Dispatch<SetAppErrorActionType | SetAppStatusActionType>;\r\n\r\nexport const handleServerAppError = <T>(data: ResponseType<T>, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC(data.messages[0] ?? 'Unknown error'));\r\n    dispatch(setAppStatusAC('failed'));\r\n}\r\n\r\nexport const handleServerNetworkError = (message: string, dispatch: ErrorUtilsDispatchType) => {\r\n    dispatch(setAppErrorAC(message));\r\n    dispatch(setAppStatusAC('failed'));\r\n}","import {todolistAPI, TodolistType} from \"../../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {RequestStatusType, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../../app/app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {getTasksTC} from \"./task_reducer\";\r\nimport {AppThunk} from \"../../app/store\";\r\n\r\nconst initialState: TodolistDomainType[] = [\r\n    // {id: \"todolistId1\", title: 'What to buy', order: 1, filter: 'all', addedDate: ''},\r\n    // {id: \"todolistId2\", title: 'What to Play', order: 0, filter: 'all', addedDate: ''},\r\n]\r\n\r\nexport const todolistReducer =\r\n    (state = initialState, action: TodolistActionsType): TodolistDomainType[] => {\r\n        switch (action.type) {\r\n            case \"CHANGE-TODOLIST-FILTER\":\r\n                return state.map(tl => tl.id === action.todolistId ? {...tl, filter: action.filter} : tl);\r\n            case \"ADD-TODOLIST\":\r\n                return [{...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state]\r\n            case \"DELETE-TODOLIST\":\r\n                return state.filter(tl => tl.id !== action.todolistId);\r\n            case \"CHANGE-TODOLIST-TITLE\":\r\n                return state.map(tl => tl.id === action.todolistId ? {...tl, title: action.title} : tl);\r\n            case \"SET-TODOLISTS\":\r\n                return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}));\r\n            case \"CHANGE-TODOLIST-ENTITY-STATUS\":\r\n                return state.map(tl => tl.id === action.todolistId ?\r\n                    {...tl, entityStatus: action.entityStatus} : tl)\r\n            case \"CLEAR-TODOLISTS-DATA\":\r\n                return []\r\n            default:\r\n                return state;\r\n        }\r\n    }\r\n\r\n//Action Creators\r\nexport const changeTodolistFilterAC = (todolistId: string, filter: FiltersValueType) => {\r\n    return {type: 'CHANGE-TODOLIST-FILTER', todolistId, filter} as const\r\n}\r\nexport const addTodolistAC = (todolist: TodolistType) => {\r\n    return {type: 'ADD-TODOLIST', todolist} as const\r\n}\r\nexport const deleteTodolistAC = (todolistId: string) => {\r\n    return {type: 'DELETE-TODOLIST', todolistId} as const\r\n}\r\nexport const changeTodolistTitleAC = (todolistId: string, title: string) => {\r\n    return {type: 'CHANGE-TODOLIST-TITLE', todolistId, title} as const\r\n}\r\nexport const setTodolistsAC = (todolists: TodolistType[]) => {\r\n    return {type: 'SET-TODOLISTS', todolists} as const\r\n}\r\nexport const changeTodolistEntityStatusAC =\r\n    (todolistId: string, entityStatus: RequestStatusType) => {\r\n        return {type: 'CHANGE-TODOLIST-ENTITY-STATUS', todolistId, entityStatus} as const\r\n    }\r\nexport const clearTodolistListDataAC = () => ({type: 'CLEAR-TODOLISTS-DATA'} as const)\r\n\r\n//Thunks\r\nexport const getTodolistsTC = (): AppThunk => {\r\n    return (dispatch) => {\r\n        dispatch(setAppStatusAC('loading'));\r\n        todolistAPI.getTodolists()\r\n            .then(res => {\r\n                    dispatch(setTodolistsAC(res.data));\r\n                    dispatch(setAppStatusAC('succeeded'));\r\n                    return res.data;\r\n                }\r\n            )\r\n            .then(res => {\r\n                res.forEach(tl => dispatch(getTasksTC(tl.id)))\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                handleServerNetworkError(err.message, dispatch);\r\n            })\r\n    }\r\n}\r\n\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: Dispatch<TodolistActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'));\r\n        todolistAPI.createTodolist(title)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTodolistAC({...res.data.data.item, title: title}));\r\n                    dispatch(setAppStatusAC('succeeded'));\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                handleServerNetworkError(err.message, dispatch);\r\n            })\r\n    }\r\n}\r\nexport const deleteTodolistTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch<TodolistActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'));\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'));\r\n        todolistAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(deleteTodolistAC(todolistId));\r\n                    dispatch(setAppStatusAC('succeeded'));\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                handleServerNetworkError(err.message, dispatch);\r\n            })\r\n            .finally(() => {\r\n                    dispatch(changeTodolistEntityStatusAC(todolistId, 'idle'));\r\n                }\r\n            )\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (todolistId: string, title: string) => {\r\n    return (dispatch: Dispatch<TodolistActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'));\r\n        dispatch(changeTodolistEntityStatusAC(todolistId, 'loading'));\r\n        todolistAPI.updateTodolist(todolistId, title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(changeTodolistTitleAC(todolistId, title));\r\n                    dispatch(changeTodolistEntityStatusAC(todolistId, 'succeeded'));\r\n                    dispatch(setAppStatusAC('succeeded'));\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                handleServerNetworkError(err.message, dispatch);\r\n            })\r\n    }\r\n}\r\n\r\n//Types\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FiltersValueType,\r\n    entityStatus: RequestStatusType,\r\n}\r\nexport type FiltersValueType = 'all' | 'active' | 'completed'\r\nexport type TodolistActionsType = AddTodolistActionType\r\n    | DeleteTodolistActionType\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\n    | ClearTodolistListDataActionType\r\n\r\nexport type ClearTodolistListDataActionType = ReturnType<typeof clearTodolistListDataAC>;\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type DeleteTodolistActionType = ReturnType<typeof deleteTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\n","import {Dispatch} from 'redux'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from \"../../api/todolist-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\nimport {clearTodolistListDataAC, ClearTodolistListDataActionType} from \"../TodolistsList/todolist_reducer\";\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const authReducer = (state: InitialStateType = initialState, action: AuthActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'AUTH/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.value}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n// Action Creators\r\nexport const setIsLoggedInAC = (value: boolean) => ({type: 'AUTH/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// Thunks\r\nexport const loginTC = (data: LoginParamsType) => {\r\n    return (dispatch: Dispatch<AuthActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'));\r\n        authAPI.login(data)\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(setIsLoggedInAC(true));\r\n                    dispatch(setAppStatusAC('succeeded'));\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((err: AxiosError) => handleServerNetworkError(err.message, dispatch));\r\n    }\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: Dispatch<AuthActionsType>) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false));\r\n                dispatch(clearTodolistListDataAC());\r\n                dispatch(setAppStatusAC('succeeded'));\r\n            } else {\r\n                handleServerAppError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch((error) => {\r\n            handleServerNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n\r\n// Types\r\nexport type AuthActionsType = ReturnType<typeof setIsLoggedInAC>\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType | ClearTodolistListDataActionType","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/todolist-api\";\r\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\n\r\nconst initialState = {\r\n    status: 'idle' as RequestStatusType,\r\n    error: '' as string | null,\r\n    isInitialized: false,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case \"APP/IS-INITIALIZED\":\r\n            return {...state, isInitialized: true}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n// Action Creators\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({type: 'APP/SET-STATUS', status} as const);\r\nexport const setAppErrorAC = (error: string | null) => ({type: 'APP/SET-ERROR', error} as const);\r\nexport const setIsInitializedAC = () => ({type: 'APP/IS-INITIALIZED'} as const);\r\n\r\n// Thunks\r\nexport const initializeAppTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        authAPI.me()\r\n            .then(res => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(setIsLoggedInAC(true));\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n                dispatch(setIsInitializedAC());\r\n            })\r\n            .catch((err: AxiosError) => handleServerNetworkError(err.message, dispatch));\r\n    }\r\n}\r\n\r\n// Types\r\nexport type AppActionsType = SetAppStatusActionType\r\n    | SetAppErrorActionType | ReturnType<typeof setIsInitializedAC>\r\n\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>;\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>;","import {\r\n    AddTodolistActionType,\r\n    ClearTodolistListDataActionType,\r\n    DeleteTodolistActionType,\r\n    SetTodolistsActionType\r\n} from \"./todolist_reducer\";\r\nimport {TasksPriorities, TasksStatuses, TaskType, todolistAPI} from \"../../api/todolist-api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"../../app/store\";\r\nimport {RequestStatusType, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../../app/app-reducer\";\r\nimport {AxiosError} from \"axios\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\n\r\n\r\nconst initialState: TaskDomainType = {\r\n    // [\"todolistId1\"]: [\r\n    //     {id: v1(), title: \"React\", status: TaskAPIStatuses.Completed, order: 0,\r\n    //         addedDate: '', deadline: '', startDate: '', description: '',\r\n    //         priority: 4, todoListId: 'todolistId1',},\r\n    //     {id: v1(), title: \"JavaScript\", status: TaskAPIStatuses.New, order: 0,\r\n    //         addedDate: '', deadline: '', startDate: '', description: '',\r\n    //         priority: 2, todoListId: 'todolistId1',},\r\n    // ],\r\n    // [\"todolistId2\"]: [\r\n    //     {id: v1(), title: \"Milk\", status: TaskAPIStatuses.Completed, order: 0,\r\n    //         addedDate: '', deadline: '', startDate: '', description: '',\r\n    //         priority: 4, todoListId: 'todolistId2',},\r\n    //     {id: v1(), title: \"React Book\", status: TaskAPIStatuses.New, order: 0,\r\n    //         addedDate: '', deadline: '', startDate: '', description: '',\r\n    //         priority: 2, todoListId: 'todolistId2',},\r\n    // ],\r\n}\r\n\r\nexport const taskReducer =\r\n    (state = initialState, action: TaskActionsType): TaskDomainType => {\r\n        switch (action.type) {\r\n            case \"DELETE-TASK\":\r\n                return {\r\n                    ...state,\r\n                    [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)\r\n                }\r\n            case \"ADD-TASK\":\r\n                return {\r\n                    ...state,\r\n                    [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]\r\n                }\r\n            case \"UPDATE-TASK\":\r\n                return {\r\n                    ...state,\r\n                    [action.todolistId]: state[action.todolistId]\r\n                        .map(t => t.id === action.taskId ? {...t, ...action.domainModel} : t)\r\n                }\r\n            case \"SET-TASKS\":\r\n                return {...state, [action.todolistId]: action.tasks}\r\n            case \"CHANGE-TASK-ENTITY-STATUS\":\r\n                return {\r\n                    ...state,\r\n                    [action.todolistId]: state[action.todolistId].map(t => t.id === action.taskId ? {\r\n                        ...t,\r\n                        entityStatus: action.entityStatus\r\n                    } : t)\r\n                }\r\n            case \"ADD-TODOLIST\":\r\n                return {[action.todolist.id]: [], ...state}\r\n            case \"DELETE-TODOLIST\": {\r\n                let copyState = {...state};\r\n                delete copyState[action.todolistId];\r\n                return copyState;\r\n            }\r\n            case \"SET-TODOLISTS\": {\r\n                let copyState = {...state};\r\n                action.todolists.forEach(tl => {\r\n                    copyState[tl.id] = [];\r\n                })\r\n                return copyState;\r\n            }\r\n            case \"CLEAR-TODOLISTS-DATA\":\r\n                return {}\r\n            default:\r\n                return state;\r\n        }\r\n    }\r\n\r\n//Action Creators\r\nexport const deleteTaskAC = (todolistId: string, taskId: string) => {\r\n    return {type: 'DELETE-TASK', todolistId, taskId} as const\r\n}\r\nexport const addTaskAC = (task: TaskType) => {\r\n    return {type: 'ADD-TASK', task} as const\r\n}\r\nexport const setTasksAC = (todolistId: string, tasks: TaskType[]) => {\r\n    return {type: 'SET-TASKS', tasks, todolistId} as const\r\n}\r\nexport const updateTaskAC = (todolistId: string, taskId: string, domainModel: UpdateTaskDomainModelType) => {\r\n    return {type: 'UPDATE-TASK', todolistId, taskId, domainModel} as const\r\n}\r\nexport const changeTaskEntityStatusAC = (todolistId: string, taskId: string, entityStatus: RequestStatusType) => {\r\n    return {type: 'CHANGE-TASK-ENTITY-STATUS', todolistId, taskId, entityStatus} as const\r\n}\r\n\r\n//Thunks\r\nexport const getTasksTC = (todolistId: string) => {\r\n    return (dispatch: Dispatch<TaskActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'));\r\n        todolistAPI.getTasks(todolistId)\r\n            .then(res => {\r\n                dispatch(setTasksAC(todolistId, res.data.items));\r\n                dispatch(setAppStatusAC('succeeded'));\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                handleServerNetworkError(err.message, dispatch);\r\n            })\r\n    }\r\n}\r\nexport const deleteTaskTC = (todolistId: string, taskId: string) => {\r\n    return (dispatch: Dispatch<TaskActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'));\r\n        dispatch(changeTaskEntityStatusAC(todolistId, taskId, 'loading'));\r\n        todolistAPI.deleteTask(todolistId, taskId)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(deleteTaskAC(todolistId, taskId));\r\n                    dispatch(setAppStatusAC('succeeded'));\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                handleServerNetworkError(err.message, dispatch);\r\n            })\r\n            .finally(() => {\r\n                dispatch(changeTaskEntityStatusAC(todolistId, taskId, 'idle'));\r\n            })\r\n    }\r\n}\r\nexport const addTaskTC = (todolistId: string, title: string) => {\r\n    return (dispatch: Dispatch<TaskActionsType>) => {\r\n        dispatch(setAppStatusAC('loading'));\r\n        todolistAPI.createTask(todolistId, title)\r\n            .then((res) => {\r\n                if (res.data.resultCode === 0) {\r\n                    dispatch(addTaskAC({\r\n                        ...res.data.data.item,\r\n                        todoListId: todolistId,\r\n                        title: title\r\n                    }));\r\n                    dispatch(setAppStatusAC('succeeded'));\r\n                } else {\r\n                    handleServerAppError(res.data, dispatch);\r\n                }\r\n            })\r\n            .catch((err: AxiosError) => {\r\n                handleServerNetworkError(err.message, dispatch);\r\n            })\r\n    }\r\n}\r\nexport const updateTaskTC =\r\n    (todolistId: string, taskId: string, domainModel: UpdateTaskDomainModelType) => {\r\n        return (dispatch: Dispatch<TaskActionsType>, getState: () => AppRootStateType) => {\r\n            let task = getState().tasks[todolistId].find(t => t.id === taskId)\r\n\r\n            if (task) {\r\n                dispatch(setAppStatusAC('loading'));\r\n                dispatch(changeTaskEntityStatusAC(todolistId, taskId, 'loading'));\r\n                todolistAPI.updateTask(todolistId, taskId, {\r\n                    title: task.title,\r\n                    status: task.status,\r\n                    deadline: task.deadline,\r\n                    description: task.description,\r\n                    priority: task.priority,\r\n                    startDate: task.startDate,\r\n                    ...domainModel\r\n                })\r\n                    .then((res) => {\r\n                        if (res.data.resultCode === 0) {\r\n                            dispatch(updateTaskAC(todolistId, taskId, domainModel));\r\n                            dispatch(changeTaskEntityStatusAC(todolistId, taskId, 'succeeded'));\r\n                            dispatch(setAppStatusAC('succeeded'));\r\n                        } else {\r\n                            handleServerAppError(res.data, dispatch);\r\n                        }\r\n                    })\r\n                    .catch((err: AxiosError) => {\r\n                        handleServerNetworkError(err.message, dispatch);\r\n                    })\r\n                    .finally(() => {\r\n                        dispatch(changeTaskEntityStatusAC(todolistId, taskId, 'idle'));\r\n                    })\r\n            }\r\n        }\r\n    }\r\n\r\n//Types\r\nexport type TaskActionsType = ReturnType<typeof deleteTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | AddTodolistActionType\r\n    | DeleteTodolistActionType\r\n    | SetTodolistsActionType\r\n    | SetAppStatusActionType\r\n    | SetAppErrorActionType\r\n    | ReturnType<typeof changeTaskEntityStatusAC>\r\n    | ClearTodolistListDataActionType\r\n\r\ntype UpdateTaskDomainModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TasksStatuses\r\n    priority?: TasksPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TaskDomainType = {\r\n    [key: string]: TaskType[],\r\n}","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport {TaskActionsType, taskReducer} from \"../features/TodolistsList/task_reducer\";\r\nimport {TodolistActionsType, todolistReducer} from \"../features/TodolistsList/todolist_reducer\";\r\nimport thunk, {ThunkAction} from \"redux-thunk\";\r\nimport {TypedUseSelectorHook, useSelector} from \"react-redux\";\r\nimport {AppActionsType, appReducer} from \"./app-reducer\";\r\nimport {AuthActionsType, authReducer} from \"../features/Login/auth-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    todolists: todolistReducer,\r\n    tasks: taskReducer,\r\n    app: appReducer,\r\n    auth: authReducer,\r\n});\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\r\n// Типы actions для всего App\r\nexport type GlobalActionsType = AppActionsType\r\n    | AuthActionsType\r\n    | TodolistActionsType\r\n    | TaskActionsType\r\n\r\n// Типизация для других thunk внутри TC\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, GlobalActionsType>\r\n// Типизация чтобы не писать каждый раз тип RootState:\r\nexport const useAppSelector: TypedUseSelectorHook<AppRootStateType> = useSelector;\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\n// store.subscribe(() => {\r\n//     console.log('TASKS', store.getState().tasks);\r\n//     console.log('TODOLISTS', store.getState().todolists);\r\n// });\r\n\r\n//@ts-ignore\r\nwindow.store = store;","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport s from './AddItemForm.module.css';\r\nimport {IconButton, TextField} from \"@mui/material\";\r\nimport {AddCircle} from \"@mui/icons-material\";\r\n\r\ntype AddItemFormPropsType = {\r\n    title?: string\r\n    callback: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo((props: AddItemFormPropsType) => {\r\n    const {title, callback} = props\r\n    const [inputValue, setInputValue] = useState('');\r\n    const [error, setError] = useState(false);\r\n\r\n    const inputChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (error) {\r\n            setError(false);\r\n        }\r\n        setInputValue(e.currentTarget.value);\r\n    }\r\n\r\n    const addButton = () => {\r\n        const value = inputValue.trim();\r\n        if (value !== '') {\r\n            callback(value);\r\n            setInputValue('');\r\n        } else {\r\n            setError(true);\r\n        }\r\n    }\r\n\r\n    const onKeyPressAdd = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            addButton();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <h3>{title}</h3>\r\n            <div className={s.addItemWrapper}>\r\n                <TextField className={s.input}\r\n                           error={error}\r\n                           id={'standard-basic'}\r\n                           label={'Insert name'}\r\n                           variant={\"standard\"}\r\n                           value={inputValue}\r\n                           onChange={inputChangeHandler}\r\n                           onKeyPress={onKeyPressAdd}\r\n                           disabled={props.disabled}\r\n                />\r\n                <IconButton onClick={addButton} color={'primary'}\r\n                            size={\"small\"}\r\n                            disabled={props.disabled}>\r\n                    <AddCircle/>\r\n                </IconButton>\r\n            </div>\r\n            {error && <div className={s.error}>Title is required!</div>}\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default AddItemForm;","import TextField from \"@mui/material/TextField/TextField\";\r\nimport React, {ChangeEvent, useState, KeyboardEvent} from \"react\";\r\nimport s from './EditableSpan.module.css';\r\n\r\ntype EditableSpanPropsType = {\r\n    title: string\r\n    callback: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const EditableSpan = React.memo((props: EditableSpanPropsType) => {\r\n    const {title, callback, disabled} = props\r\n\r\n    const [editMode, setEditMode] = useState(false);\r\n    const [inputValue, setInputValue] = useState(title);\r\n\r\n    const inputChangeHandler = (e: ChangeEvent<HTMLInputElement>) => setInputValue(e.currentTarget.value);\r\n    const enableEditMode = () => {\r\n        if (disabled === false) {\r\n            setEditMode(true);\r\n        }\r\n    }\r\n    const disableEditMode = () => {\r\n        const value = inputValue.trim();\r\n        //Check if title is same\r\n        if (value !== '' && title !== value) {\r\n            callback(value);\r\n        } else {\r\n            setInputValue(title); //If string = void, return latest value\r\n        }\r\n        setInputValue(value.trim()) //Clear spaces after edit\r\n        setEditMode(false);\r\n    }\r\n    const onKeyPressEdit = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            disableEditMode();\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {editMode ?\r\n                <TextField className={s.input}\r\n                           size={\"small\"}\r\n                           variant={\"outlined\"}\r\n                           value={inputValue}\r\n                           onBlur={disableEditMode}\r\n                           onChange={inputChangeHandler}\r\n                           onKeyPress={onKeyPressEdit}\r\n                           onFocus={e => e.currentTarget.select()}\r\n                           autoFocus\r\n\r\n                />\r\n                :\r\n                <span className={s.task}\r\n                      onDoubleClick={enableEditMode}>\r\n                    {title}\r\n                </span>}\r\n        </>\r\n    );\r\n});","import React, {ChangeEvent, useCallback} from \"react\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport s from \"./Task.module.css\";\r\nimport Checkbox from \"@mui/material/Checkbox\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport {Delete} from \"@mui/icons-material\";\r\nimport {TasksStatuses, TaskType} from \"../../../../api/todolist-api\";\r\n\r\ntype TaskPropsType = {\r\n    todolistId: string\r\n    task: TaskType\r\n    changeTaskTitle: (todolistId: string, taskId: string, title: string) => void\r\n    changeTaskStatus: (todolistId: string, taskId: string, status: TasksStatuses) => void\r\n    deleteTask: (todolistId: string, taskId: string) => void\r\n}\r\n\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const {todolistId, task, changeTaskStatus, changeTaskTitle, deleteTask} = props\r\n    const {id, title, status, entityStatus} = task\r\n\r\n    const disableWhileLoading = entityStatus === 'loading';\r\n    const deleteTaskHandler = useCallback(() => {\r\n        deleteTask(todolistId, id)\r\n    }, [deleteTask, todolistId, id]);\r\n\r\n    const changeTaskStatusHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        changeTaskStatus(todolistId, id, newIsDoneValue ?\r\n            TasksStatuses.Completed : TasksStatuses.New)\r\n    }, [changeTaskStatus, todolistId, id]);\r\n\r\n    const changeTaskTitleCallback = useCallback((title: string) => {\r\n        changeTaskTitle(todolistId, id, title)\r\n    }, [changeTaskTitle, todolistId, id]);\r\n\r\n    return (\r\n        <div className={status === TasksStatuses.Completed ? s.done : ''}>\r\n            <Checkbox color={'info'}\r\n                      onChange={changeTaskStatusHandler}\r\n                      checked={status === TasksStatuses.Completed}\r\n                      disabled={entityStatus === 'loading'}\r\n            />\r\n            <EditableSpan title={title}\r\n                          callback={changeTaskTitleCallback}\r\n                          disabled={disableWhileLoading}/>\r\n            <IconButton size={'small'} onClick={deleteTaskHandler} disabled={disableWhileLoading}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </div>\r\n    );\r\n});","import React, {useCallback, useEffect} from \"react\";\r\nimport s from './Todolist.module.css';\r\nimport {AddItemForm} from \"../../../components/AddItemForm/AddItemForm\";\r\nimport {EditableSpan} from \"../../../components/EditableSpan/EditableSpan\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {TasksStatuses, TaskType} from \"../../../api/todolist-api\";\r\nimport {FiltersValueType, TodolistDomainType} from \"../todolist_reducer\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Button from \"@mui/material/Button\";\r\nimport {DeleteForever} from \"@mui/icons-material\";\r\n\r\ntype TodolistPropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: TaskType[]\r\n    deleteTodolist: (todolistId: string) => void\r\n    changeTodolistFilter: (todolistId: string, filter: FiltersValueType) => void\r\n    changeTodolistTitle: (todolistId: string, title: string) => void\r\n    addTask: (todolistId: string, title: string) => void\r\n    changeTaskTitle: (todolistId: string, taskId: string, title: string) => void\r\n    changeTaskStatus: (todolistId: string, taskId: string, status: TasksStatuses) => void\r\n    deleteTask: (todolistId: string, taskId: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(({demo = false, ...props}: TodolistPropsType) => {\r\n    const {\r\n        tasks, todolist,\r\n        deleteTask, changeTaskStatus, addTask, changeTaskTitle,\r\n        changeTodolistFilter, deleteTodolist, changeTodolistTitle,\r\n    } = props\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return;\r\n        }\r\n\r\n    }, [demo])\r\n\r\n    const disableWhileLoading = todolist.entityStatus === 'loading'\r\n\r\n    let filteredTasks = tasks;\r\n    if (todolist.filter === 'active') {\r\n        filteredTasks = tasks.filter(t => t.status === TasksStatuses.New);\r\n    }\r\n    if (todolist.filter === \"completed\") {\r\n        filteredTasks = tasks.filter(t => t.status === TasksStatuses.Completed);\r\n    }\r\n\r\n    const tasksList = filteredTasks.map(t => {\r\n        return (\r\n            <Task key={t.id}\r\n                  task={t}\r\n                  todolistId={todolist.id}\r\n                  changeTaskTitle={changeTaskTitle}\r\n                  changeTaskStatus={changeTaskStatus}\r\n                  deleteTask={deleteTask}/>\r\n        );\r\n    })\r\n\r\n    //Callbacks\r\n    const allFilterHandler = useCallback(() => {\r\n        changeTodolistFilter(todolist.id, 'all')\r\n    }, [changeTodolistFilter, todolist.id]);\r\n\r\n    const activeFilterHandler = useCallback(() => {\r\n        changeTodolistFilter(todolist.id, 'active')\r\n    }, [changeTodolistFilter, todolist.id]);\r\n\r\n    const completeFilterHandler = useCallback(() => {\r\n        changeTodolistFilter(todolist.id, 'completed')\r\n    }, [changeTodolistFilter, todolist.id]);\r\n\r\n    const deleteTodolistHandler = useCallback(() => {\r\n        deleteTodolist(todolist.id)\r\n    }, [deleteTodolist, todolist.id]);\r\n\r\n    const changeTodolistTitleCallback = useCallback((title: string) => {\r\n        changeTodolistTitle(todolist.id, title)\r\n    }, [changeTodolistTitle, todolist.id]);\r\n\r\n    const addTaskCallback = useCallback((title: string) => {\r\n        addTask(todolist.id, title)\r\n    }, [addTask, todolist.id]);\r\n\r\n\r\n    //Styles\r\n    const allStyle = todolist.filter === 'all' ? 'contained' : 'text';\r\n    const activeStyle = todolist.filter === 'active' ? 'contained' : 'text';\r\n    const completeStyle = todolist.filter === 'completed' ? 'contained' : 'text';\r\n    const colorDeleteBtn = disableWhileLoading ? 'inherit' : 'error';\r\n\r\n    return (\r\n        <div key={todolist.id} className={s.wrapper}>\r\n            <h3 className={s.title}>\r\n                <EditableSpan title={todolist.title}\r\n                              callback={changeTodolistTitleCallback}\r\n                              disabled={disableWhileLoading}/>\r\n                <IconButton onClick={deleteTodolistHandler}\r\n                            disabled={disableWhileLoading}>\r\n                    <DeleteForever color={colorDeleteBtn}/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm callback={addTaskCallback} disabled={disableWhileLoading}/>\r\n            <div className={s.tasksWrapper}>{tasksList}</div>\r\n            <div className={s.btnWrapper}>\r\n                <Button title={'All'}\r\n                        className={s.filterBtn}\r\n                        color={\"info\"}\r\n                        variant={allStyle}\r\n                        onClick={allFilterHandler}>All\r\n                </Button>\r\n\r\n                <Button title={'Active'}\r\n                        className={s.filterBtn}\r\n                        color={\"warning\"}\r\n                        variant={activeStyle}\r\n                        onClick={activeFilterHandler}>Active\r\n                </Button>\r\n\r\n                <Button title={'All'}\r\n                        className={s.filterBtn}\r\n                        color={\"success\"}\r\n                        variant={completeStyle}\r\n                        onClick={completeFilterHandler}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n});","import {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType, useAppSelector} from \"../../app/store\";\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    deleteTodolistTC,\r\n    FiltersValueType,\r\n    getTodolistsTC,\r\n    TodolistDomainType\r\n} from \"./todolist_reducer\";\r\nimport {addTaskTC, deleteTaskTC, TaskDomainType, updateTaskTC} from \"./task_reducer\";\r\nimport React, {useCallback, useEffect} from \"react\";\r\nimport {TasksStatuses} from \"../../api/todolist-api\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport s from \"./TodolistsList.module.css\";\r\nimport {Todolist} from \"./Todolist/Todolist\";\r\nimport {AddItemForm} from \"../../components/AddItemForm/AddItemForm\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList = ({demo = false}: PropsType) => {\r\n    const isLoggedIn = useAppSelector<boolean>(state => state.auth.isLoggedIn);\r\n    const dispatch = useDispatch();\r\n    const todolists = useSelector<AppRootStateType, TodolistDomainType[]>(state => state.todolists);\r\n    const tasks = useSelector<AppRootStateType, TaskDomainType>(state => state.tasks);\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        dispatch(getTodolistsTC());\r\n    }, [dispatch, demo, isLoggedIn])\r\n\r\n    //Tasks Functions\r\n    const deleteTask = useCallback((todolistId: string, taskId: string) => {\r\n        dispatch(deleteTaskTC(todolistId, taskId));\r\n    }, [dispatch]);\r\n    const changeTaskStatus = useCallback((todolistId: string, taskId: string, status: TasksStatuses) => {\r\n        dispatch(updateTaskTC(todolistId, taskId, {status}));\r\n    }, [dispatch]);\r\n    const addTask = useCallback((todolistId: string, title: string) => {\r\n        dispatch(addTaskTC(todolistId, title));\r\n    }, [dispatch])\r\n    const changeTaskTitle = useCallback((todolistId: string, taskId: string, title: string) => {\r\n        dispatch(updateTaskTC(todolistId, taskId, {title}));\r\n    }, [dispatch]);\r\n\r\n    //Todolists Functions\r\n    const changeTodolistTitle = useCallback((todolistId: string, title: string) => {\r\n        dispatch(changeTodolistTitleTC(todolistId, title));\r\n    }, [dispatch]);\r\n    const changeTodolistFilter = useCallback((todolistId: string, filterValue: FiltersValueType) => {\r\n        dispatch(changeTodolistFilterAC(todolistId, filterValue));\r\n    }, [dispatch]);\r\n    const addTodolist = useCallback((title: string) => {\r\n        dispatch(addTodolistTC(title));\r\n    }, [dispatch]);\r\n    const deleteTodolist = useCallback((todolistId: string) => {\r\n        dispatch(deleteTodolistTC(todolistId));\r\n    }, [dispatch]);\r\n\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={'/login'}/>\r\n    }\r\n\r\n    const todolistList = todolists.map(tl => {\r\n        const tasksForTodolist = tasks[tl.id];\r\n\r\n        return (\r\n            <Grid key={tl.id} item>\r\n                <Paper className={s.todolistWrapper} elevation={5}>\r\n                    <Todolist\r\n                        todolist={tl}\r\n                        tasks={tasksForTodolist}\r\n                        changeTodolistTitle={changeTodolistTitle}\r\n                        deleteTodolist={deleteTodolist}\r\n                        changeTodolistFilter={changeTodolistFilter}\r\n                        changeTaskTitle={changeTaskTitle}\r\n                        addTask={addTask}\r\n                        changeTaskStatus={changeTaskStatus}\r\n                        deleteTask={deleteTask}\r\n                        demo={demo}\r\n                    />\r\n                </Paper>\r\n            </Grid>\r\n        );\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Grid className={s.addItemFormWrapper} container>\r\n                <AddItemForm title={'Add list'} callback={addTodolist}/>\r\n            </Grid>\r\n            <Grid className={s.listWrapper} container spacing={4}>\r\n                {todolistList}\r\n            </Grid>\r\n        </>\r\n    );\r\n}","import * as React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, {AlertProps} from '@mui/material/Alert';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {useAppSelector} from \"../../app/store\";\r\nimport {setAppErrorAC} from \"../../app/app-reducer\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(\r\n    function Alert(props, ref) {\r\n        return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n    });\r\n\r\nexport const ErrorSnackBar = () => {\r\n    const dispatch = useDispatch();\r\n    const error = useAppSelector<string | null>(state => state.app.error);\r\n\r\n    const onCloseHandler = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC(null));\r\n    };\r\n\r\n    return (\r\n        <Snackbar anchorOrigin={{vertical: 'bottom', horizontal: 'center'}}\r\n                  open={!!error}\r\n                  autoHideDuration={2000}\r\n                  onClose={onCloseHandler}>\r\n\r\n            <Alert onClose={onCloseHandler} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport s from './Login.module.css';\r\nimport {useFormik} from \"formik\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {useAppSelector} from \"../../app/store\";\r\nimport {Navigate} from 'react-router-dom';\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const Login = () => {\r\n    const isLoggedIn = useAppSelector<boolean>(state => state.auth.isLoggedIn);\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n            formik.resetForm();\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {};\r\n\r\n            if (!values.email) errors.email = 'Email is required';\r\n            else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) errors.password = 'Password required';\r\n            else if (values.password.length < 3) errors.password = 'Min length 3 characters';\r\n\r\n            return errors;\r\n        }\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Navigate to={'/'}/>\r\n    }\r\n\r\n    return (\r\n        <Grid className={s.loginWrapper} container justifyContent={'center'}>\r\n            <Grid item justifyContent={'center'}>\r\n                <h1>Log In</h1>\r\n                <FormControl>\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <FormGroup>\r\n                            <TextField className={s.inputs}\r\n                                       label='Email'\r\n                                       margin='normal'\r\n                                       {...formik.getFieldProps('email')}\r\n                            />\r\n                            {formik.touched.email && formik.errors.email &&\r\n                                <div className={s.error}>{formik.errors.email}</div>}\r\n\r\n                            <TextField className={s.inputs}\r\n                                       type='password'\r\n                                       label='Password'\r\n                                       margin=\"normal\"\r\n                                       {...formik.getFieldProps('password')}\r\n                            />\r\n                            {formik.touched.password && formik.errors.password &&\r\n                                <div className={s.error}>{formik.errors.password}</div>}\r\n\r\n                            <FormControlLabel label={'Remember me'} control={\r\n                                <Checkbox\r\n                                    color={'success'}\r\n                                    {...formik.getFieldProps('rememberMe')}\r\n                                />\r\n                            }/>\r\n\r\n                            <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                                Login\r\n                            </Button>\r\n                        </FormGroup>\r\n                    </form>\r\n                </FormControl>\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n}\r\n","import React, {useEffect} from 'react';\nimport AppBar from '@mui/material/AppBar';\nimport Container from '@mui/material/Container';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\nimport IconButton from '@mui/material/IconButton';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport s from './App.module.css';\nimport {TodolistsList} from \"../features/TodolistsList/TodolistsList\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport LinearProgress from \"@mui/material/LinearProgress\";\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\nimport {useAppSelector} from \"./store\";\nimport {ErrorSnackBar} from \"../components/ErrorSnackBar/ErrorSnackBar\";\nimport {Route, Routes, Navigate} from 'react-router-dom';\nimport {Login} from \"../features/Login/Login\";\nimport {useDispatch} from \"react-redux\";\nimport {logoutTC} from \"../features/Login/auth-reducer\";\n\ntype PropsType = {\n    demo?: boolean\n}\n\nfunction App({demo = false}: PropsType) {\n    const status = useAppSelector<RequestStatusType>(state => state.app.status);\n    const isInitialized = useAppSelector<boolean>(state => state.app.isInitialized);\n    const isLoggedIn = useAppSelector<boolean>(state => state.auth.isLoggedIn);\n    const dispatch = useDispatch();\n\n    useEffect(() => {\n        dispatch(initializeAppTC());\n    }, [dispatch])\n\n\n    const onLogoutClickHandler = () => {\n        dispatch(logoutTC());\n    }\n\n    if (!isInitialized) {\n        return (\n            <div\n                style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\n                <CircularProgress/>\n            </div>\n        );\n    }\n\n\n    return (\n        <div className={s.mainApp}>\n\n            <ErrorSnackBar/>\n\n            <AppBar position='relative'>\n                <Toolbar>\n                    <IconButton\n                        size='large'\n                        edge='start'\n                        color='inherit'\n                        aria-label='menu'\n                        sx={{mr: 2}}>\n                        <MenuIcon/>\n                    </IconButton>\n                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\n                        TodoList Application\n                    </Typography>\n                    {isLoggedIn ?\n                        <Button onClick={onLogoutClickHandler} color='inherit'>Logout</Button>\n                        :\n                        <Button color='inherit'>Login</Button>\n                    }\n                </Toolbar>\n                {status === 'loading' && <LinearProgress className={s.loadingBar} color={'success'}/>}\n            </AppBar>\n            <Container className={s.todolistsContainer} fixed>\n                <Routes>\n                    <Route path={'/'} element={<TodolistsList demo={demo}/>}/>\n                    <Route path={'login'} element={<Login/>}/>\n                    <Route path={'/*'} element={\n                        <div style={{margin: '10% auto'}}>\n                            <h1 style={{textAlign: 'center', marginTop: '10%', color: 'red'}}>\n                                404: Page NOT FOUND\n                            </h1>\n                        </div>\n                    }/>\n                </Routes>\n            </Container>\n        </div>\n    );\n}\n\nexport default App;\n\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport reportWebVitals from './reportWebVitals';\nimport {StyledEngineProvider} from '@mui/material';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./app/store\";\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <StyledEngineProvider injectFirst>\n                <HashRouter>\n                    <App/>\n                </HashRouter>\n            </StyledEngineProvider>\n        </Provider>\n\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"Todolist_wrapper__ey2ul\",\"tasksWrapper\":\"Todolist_tasksWrapper__MFeLa\",\"btnWrapper\":\"Todolist_btnWrapper__15caS\",\"deleteBtn\":\"Todolist_deleteBtn__1tukC\",\"title\":\"Todolist_title__xhMKP\",\"filterBtn\":\"Todolist_filterBtn__1SY1g\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginWrapper\":\"Login_loginWrapper__3TsW5\",\"inputs\":\"Login_inputs__3JRm4\",\"error\":\"Login_error__1EZt6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"addItemWrapper\":\"AddItemForm_addItemWrapper__3xczE\",\"error\":\"AddItemForm_error__r1ap8\",\"input\":\"AddItemForm_input__3S4CR\",\"errorInput\":\"AddItemForm_errorInput__3SbG3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainApp\":\"App_mainApp__2XCzb\",\"todolistsContainer\":\"App_todolistsContainer__14cMq\",\"loadingBar\":\"App_loadingBar__hMBye\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"todolistWrapper\":\"TodolistsList_todolistWrapper__3ynHT\",\"addItemFormWrapper\":\"TodolistsList_addItemFormWrapper__27EuT\",\"listWrapper\":\"TodolistsList_listWrapper__3Euym\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"EditableSpan_input__y3r8A\",\"task\":\"EditableSpan_task__iU_zk\"};"],"sourceRoot":""}