{"version":3,"sources":["components/Button.tsx","components/SingleInput.tsx","components/EditableSpan.tsx","components/TodoList.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/TodoList.module.css"],"names":["Button","props","className","onClick","callback","title","SingleInput","inputValue","setInputValue","error","setError","value","onChange","e","currentTarget","onKeyPress","key","s","errorInput","EditableSpan","useState","editMode","setEditMode","activateViewMode","onBlur","autoFocus","onDoubleClick","TodoList","tasks","filter","todolistID","taskList","map","t","isDone","done","list","type","changeTaskStatus","id","checked","changeTaskTitle","removeTask","filterChangeFunction","changeFilter","addTask","trim","styleAll","activeFilter","styleActive","styleCompleted","changeTitleTodolist","deleteTodolist","inputWrapper","App","todolistID1","v1","todolistID2","todolist","setTodolist","setTasks","changeStatus","taskId","newTitle","tl","console","log","React","version","tasksForTodolist","newTodolistTitle","prompt","newTodolistID","alert","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"sQAQO,SAASA,EAAOC,GACnB,OACQ,wBAAQC,UAAWD,EAAMC,UAAWC,QAASF,EAAMG,SAAnD,SAA8DH,EAAMI,QCCzE,IAAMC,EAAc,SAAC,GAAsF,IAArFF,EAAoF,EAApFA,SAAUG,EAA0E,EAA1EA,WAAYC,EAA8D,EAA9DA,cAAeC,EAA+C,EAA/CA,MAAOC,EAAwC,EAAxCA,SAAwC,4EAY7G,OACI,gCACI,uBAAOC,MAAOJ,EACPK,SAbS,SAACC,GACrBL,EAAcK,EAAEC,cAAcH,QAanBI,WAVW,SAACF,GACvBH,EAAS,MACK,UAAVG,EAAEG,KACFZ,KAQOF,UAAWO,EAAQQ,IAAEC,WAAa,KACxCT,GAAS,qBAAKP,UAAWe,IAAER,MAAlB,SAA0BA,QCtBzC,SAASU,EAAT,GAAuD,IAAhCd,EAA+B,EAA/BA,MAAMD,EAAyB,EAAzBA,SAAyB,EACzBgB,oBAAkB,GADO,mBAClDC,EADkD,KACxCC,EADwC,OAErBF,mBAAiB,IAFI,mBAElDb,EAFkD,KAEtCC,EAFsC,KAQnDe,EAAmB,WACrBD,GAAY,GACZlB,EAASG,IASb,OACIc,EAEI,uBAAOV,MAAOJ,EAAYiB,OAAQD,EAAkBX,SALjC,SAACC,GAAD,OAAsCL,EAAcK,EAAEC,cAAcH,QAKLI,WAVvE,SAACF,GACL,UAAVA,EAAEG,KACDO,KAQ4GE,WAAS,IAEnH,uBAAMC,cApBW,WACrBJ,GAAY,GACZd,EAAcH,IAkBV,cAAyCA,EAAzC,OCJL,SAASsB,EAAT,GAAqE,IAAlDC,EAAiD,EAAjDA,MAAOC,EAA0C,EAA1CA,OAAQC,EAAkC,EAAlCA,WAAe7B,EAAmB,iDACrCmB,mBAAS,IAD4B,mBAClEb,EADkE,KACtDC,EADsD,OAE/CY,mBAAwB,MAFuB,mBAElEX,EAFkE,KAE3DC,EAF2D,KAKjEqB,EAAWH,EAAMI,KAAI,SAAAC,GAUvB,OAAO,qBAAe/B,UAAW+B,EAAEC,OAASjB,IAAEkB,KAAOlB,IAAEmB,KAAhD,UACH,uBAAOC,KAAK,WACLzB,SAVa,SAACC,GACrBZ,EAAMqC,iBAAiBR,EAAYG,EAAEM,GAAI1B,EAAEC,cAAc0B,UAUlDA,QAASP,EAAEC,SAClB,cAACf,EAAD,CAAcd,MAAO4B,EAAE5B,MAAOD,SARL,SAACG,GAC1BN,EAAMwC,gBAAgBX,EAAYG,EAAEM,GAAIhC,MAQxC,wBAAQJ,QAdW,kBAAMF,EAAMyC,WAAWZ,EAAYG,EAAEM,KAcxD,iBALYN,EAAEM,OAWhBI,EAAuB,SAACd,GAAD,OAA8B5B,EAAM2C,aAAad,EAAYD,IAEpFgB,EAAU,WACc,KAAtBtC,EAAWuC,QACX7C,EAAM4C,QAAQf,EAAYvB,EAAWuC,QACrCtC,EAAc,KAEdE,EAAS,sBAUXqC,EAAsB,QAAXlB,EAAmBZ,IAAE+B,aAAe,GAC/CC,EAAyB,WAAXpB,EAAsBZ,IAAE+B,aAAe,GACrDE,EAA4B,cAAXrB,EAAyBZ,IAAE+B,aAAe,GAEjE,OACI,gCACI,6BACI,cAAC7B,EAAD,CAAcd,MAAOJ,EAAMI,MAAOD,SAbT,SAACG,GAClCN,EAAMkD,oBAAoBrB,EAAYvB,QAelC,cAACP,EAAD,CAAQK,MAAO,cAAeD,SA5BR,kBAAMH,EAAMmD,eAAetB,MA6BjD,sBAAK5B,UAAWe,IAAEoC,aAAlB,UACI,cAAC,EAAD,CAAa9C,WAAYA,EACZC,cAAeA,EACfC,MAAOA,EACPC,SAAUA,EACVN,SAAUyC,IACvB,cAAC7C,EAAD,CAAQK,MAAO,IAAKD,SAAUyC,OAElC,6BAAKd,IACL,gCACI,cAAC/B,EAAD,CAAQK,MAAO,MACPH,UAAW6C,EACX3C,SAAU,kBAAMuC,EAAqB,UAE7C,cAAC3C,EAAD,CAAQK,MAAO,SACPH,UAAW+C,EACX7C,SAAU,kBAAMuC,EAAqB,aAE7C,cAAC3C,EAAD,CAAQK,MAAO,YACPH,UAAWgD,EACX9C,SAAU,kBAAMuC,EAAqB,sB,YCc9CW,MApGf,WAAgB,IAAD,EACLC,EAAcC,cACdC,EAAcD,cAFT,EAIqBpC,mBAA0B,CACtD,CAACmB,GAAIgB,EAAalD,MAAO,gBAAiBwB,OAAQ,OAClD,CAACU,GAAIkB,EAAapD,MAAO,cAAewB,OAAQ,SANzC,mBAIJ6B,EAJI,KAIMC,EAJN,OAQavC,oBAAQ,mBAC3BmC,EAAc,CACX,CAAChB,GAAIiB,cAAMnD,MAAO,WAAY6B,QAAQ,GACtC,CAACK,GAAIiB,cAAMnD,MAAO,KAAM6B,QAAQ,GAChC,CAACK,GAAIiB,cAAMnD,MAAO,UAAW6B,QAAQ,GACrC,CAACK,GAAIiB,cAAMnD,MAAO,WAAY6B,QAAQ,GACtC,CAACK,GAAIiB,cAAMnD,MAAO,UAAW6B,QAAQ,KANb,cAQ3BuB,EAAc,CACX,CAAClB,GAAIiB,cAAMnD,MAAO,QAAS6B,QAAQ,GACnC,CAACK,GAAIiB,cAAMnD,MAAO,OAAQ6B,QAAQ,GAClC,CAACK,GAAIiB,cAAMnD,MAAO,QAAS6B,QAAQ,GACnC,CAACK,GAAIiB,cAAMnD,MAAO,OAAQ6B,QAAQ,GAClC,CAACK,GAAIiB,cAAMnD,MAAO,OAAQ6B,QAAQ,KAbV,IARrB,mBAQNN,EARM,KAQCgC,EARD,KAyBX,SAASlB,EAAWZ,EAAoBS,GACpCqB,EAAS,2BAAIhC,GAAL,kBAAaE,EAAaF,EAAME,GAAYD,QAAO,SAAAI,GAAC,OAAIA,EAAEM,KAAOA,QAG7E,SAASM,EAAQf,EAAoBzB,GACjCuD,EAAS,2BAAIhC,GAAL,kBAAaE,EAAb,CAA2B,CAACS,GAAIiB,cAAMnD,MAAOA,EAAO6B,QAAQ,IAA5D,mBAAuEN,EAAME,QAGzF,SAAS+B,EAAa/B,EAAoBgC,EAAgB5B,GACtD0B,EAAS,2BAAIhC,GAAL,kBAAaE,EAAaF,EAAME,GAAYE,KAAI,SAAAC,GAAC,OAAIA,EAAEM,KAAOuB,EAAT,2BAAsB7B,GAAtB,IAAyBC,OAAQA,IAAUD,QAG5G,SAASW,EAAad,EAAoBnB,GACtCgD,EAAYD,EAAS1B,KAAI,SAAAC,GAAC,OAAIA,EAAEM,KAAOT,EAAT,2BAA0BG,GAA1B,IAA6BJ,OAAQlB,IAASsB,MAGhF,IAAMQ,EAAkB,SAACX,EAAoBgC,EAAgBC,GACzDH,EAAS,2BAAIhC,GAAL,kBAAaE,EAAaF,EAAME,GAAYE,KAAI,SAAAC,GAAC,OAAIA,EAAEM,KAAOuB,EAAT,2BAAsB7B,GAAtB,IAAyB5B,MAAO0D,IAAY9B,SAGvGkB,EAAsB,SAACrB,EAAoBiC,GAC7CJ,EAAYD,EAAS1B,KAAI,SAAAgC,GAAE,OAAIA,EAAGzB,KAAOT,EAAV,2BAA2BkC,GAA3B,IAA+B3D,MAAO0D,IAAYC,OAG/EZ,EAAiB,SAACtB,GACpB6B,EAAYD,EAAS7B,QAAO,SAAAI,GAAC,OAAIA,EAAEM,KAAOT,OAc9C,OADAmC,QAAQC,IAAIC,IAAMC,SAEd,sBAAKlE,UAAU,MAAf,UACKwD,EAAS1B,KAAI,SAAAgC,GACV,IAAIK,EAAmBzC,EAAMoC,EAAGzB,IAQhC,MAPkB,WAAdyB,EAAGnC,SACHwC,EAAmBzC,EAAMoC,EAAGzB,IAAIV,QAAO,SAAAI,GAAC,OAAKA,EAAEC,WAEjC,cAAd8B,EAAGnC,SACHwC,EAAmBzC,EAAMoC,EAAGzB,IAAIV,QAAO,SAAAI,GAAC,OAAIA,EAAEC,WAI9C,cAACP,EAAD,CAAUtB,MAAO2D,EAAG3D,MAEVyB,WAAYkC,EAAGzB,GACfX,MAAOyC,EACP3B,WAAYA,EACZE,aAAcA,EACdC,QAASA,EACTP,iBAAkBuB,EAClBpB,gBAAiBA,EACjBZ,OAAQmC,EAAGnC,OACXuB,eAAgBA,EAChBD,oBAAqBA,GAVhBa,EAAGzB,OAe1B,cAACvC,EAAD,CAAQK,MAAO,eACPH,UAAW,YACXE,SAzCI,WAChB,IAAMkE,EAAmBC,OAAO,iBAChC,GAAID,EAAkB,CAClB,IAAME,EAAgBhB,cACtBI,EAAS,2BAAIhC,GAAL,kBAAa4C,EAAgB,MACrCb,EAAY,GAAD,mBAAKD,GAAL,CAAe,CAACnB,GAAIiC,EAAenE,MAAOiE,EAAkBzC,OAAQ,eAE/E4C,MAAM,4BAmCN,+BAAON,IAAMC,cChGVM,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K,kBCfAc,EAAOC,QAAU,CAAC,aAAe,+BAA+B,MAAQ,wBAAwB,aAAe,+BAA+B,WAAa,6BAA6B,KAAO,uBAAuB,KAAO,0B","file":"static/js/main.c7c846c2.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\ntype buttonPropsType = {\r\n    title: string\r\n    className?: string\r\n    callback: () => void\r\n}\r\n\r\nexport function Button(props: buttonPropsType) {\r\n    return (\r\n            <button className={props.className} onClick={props.callback}>{props.title}</button>\r\n    );\r\n}","import React, {ChangeEvent, KeyboardEvent} from \"react\";\r\nimport s from './TodoList.module.css';\r\n\r\ntype inputPropsType = {\r\n    inputValue: string\r\n    error: string | null\r\n    setInputValue: (title: string) => void\r\n    setError: (error: string | null) => void\r\n    callback: () => void\r\n}\r\n\r\nexport const SingleInput = ({callback, inputValue, setInputValue, error, setError, ...props}: inputPropsType) => {\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setInputValue(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.key === 'Enter') {\r\n            callback();\r\n        }\r\n    }\r\n    return (\r\n        <div>\r\n            <input value={inputValue}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   className={error ? s.errorInput : \"\"}/>\r\n            {error && <div className={s.error}>{error}</div>}\r\n        </div>\r\n    );\r\n}","import React, {ChangeEvent, useState, KeyboardEvent} from \"react\";\r\n\r\ntype editableSpan = {\r\n    title: string\r\n    callback: (newTitle:string) => void\r\n}\r\n\r\nexport function EditableSpan({title,callback}: editableSpan) {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [inputValue, setInputValue] = useState<string>('')\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setInputValue(title);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        callback(inputValue);\r\n    }\r\n    const onEnterAdd = (e:KeyboardEvent<HTMLInputElement>) => {\r\n      if(e.key === 'Enter') {\r\n          activateViewMode();\r\n      }\r\n    }\r\n    const onChangeInputValue = (e: ChangeEvent<HTMLInputElement>) => setInputValue(e.currentTarget.value);\r\n\r\n    return (\r\n        editMode\r\n            ?\r\n            <input value={inputValue} onBlur={activateViewMode} onChange={onChangeInputValue} onKeyPress={onEnterAdd} autoFocus/>\r\n            :\r\n            <span onDoubleClick={activateEditMode}> {title} </span>\r\n    );\r\n}","import React, {ChangeEvent, useState} from 'react';\r\nimport {FilterValuesType} from '../App';\r\nimport s from './TodoList.module.css';\r\nimport {Button} from \"./Button\";\r\nimport {SingleInput} from \"./SingleInput\";\r\nimport {EditableSpan} from \"./EditableSpan\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    todolistID: string\r\n    removeTask: (todolistID: string, taskId: string) => void\r\n    changeFilter: (todolistID: string, value: FilterValuesType) => void\r\n    addTask: (todolistID: string, title: string) => void\r\n    changeTaskStatus: (todolistID: string, taskId: string, isDone: boolean) => void\r\n    deleteTodolist: (todolistID: string) => void\r\n    changeTaskTitle: (todolistID: string, taskId:string, newTitle: string) => void\r\n    changeTitleTodolist: (todolistID: string, newTitle: string) => void\r\n}\r\n\r\nexport function TodoList({tasks, filter, todolistID, ...props}: PropsType) {\r\n    let [inputValue, setInputValue] = useState(\"\");\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    //Create lists\r\n    const taskList = tasks.map(t => {\r\n        const onClickHandler = () => props.removeTask(todolistID, t.id)\r\n        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            props.changeTaskStatus(todolistID, t.id, e.currentTarget.checked);\r\n        }\r\n\r\n        const onChangeTitleHandler = (inputValue: string) => {\r\n            props.changeTaskTitle(todolistID, t.id, inputValue);\r\n        }\r\n\r\n        return <li key={t.id} className={t.isDone ? s.done : s.list}>\r\n            <input type=\"checkbox\"\r\n                   onChange={onChangeHandler}\r\n                   checked={t.isDone}/>\r\n            <EditableSpan title={t.title} callback={onChangeTitleHandler}/>\r\n            <button onClick={onClickHandler}>x</button>\r\n        </li>\r\n    })\r\n\r\n    //Funcitons\r\n    const onClickRemoveTodolist = () => props.deleteTodolist(todolistID);\r\n    const filterChangeFunction = (filter: FilterValuesType) => props.changeFilter(todolistID, filter);\r\n\r\n    const addTask = () => {\r\n        if (inputValue.trim() !== \"\") {\r\n            props.addTask(todolistID, inputValue.trim());\r\n            setInputValue(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeTitleTodolistHandler = (inputValue: string) => {\r\n        props.changeTitleTodolist(todolistID, inputValue);\r\n    }\r\n\r\n\r\n    //Styles\r\n    const styleAll = filter === 'all' ? s.activeFilter : \"\";\r\n    const styleActive = filter === 'active' ? s.activeFilter : \"\";\r\n    const styleCompleted = filter === 'completed' ? s.activeFilter : \"\";\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} callback={onChangeTitleTodolistHandler}/>\r\n            </h3>\r\n            {/*<h3>{props.title}</h3>*/}\r\n            <Button title={'Delete list'} callback={onClickRemoveTodolist}/>\r\n            <div className={s.inputWrapper}>\r\n                <SingleInput inputValue={inputValue}\r\n                             setInputValue={setInputValue}\r\n                             error={error}\r\n                             setError={setError}\r\n                             callback={addTask}/>\r\n                <Button title={'+'} callback={addTask}/>\r\n            </div>\r\n            <ul>{taskList}</ul>\r\n            <div>\r\n                <Button title={'All'}\r\n                        className={styleAll}\r\n                        callback={() => filterChangeFunction('all')}/>\r\n\r\n                <Button title={'Active'}\r\n                        className={styleActive}\r\n                        callback={() => filterChangeFunction('active')}/>\r\n\r\n                <Button title={'Completed'}\r\n                        className={styleCompleted}\r\n                        callback={() => filterChangeFunction('completed')}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, {useState} from 'react';\nimport './App.css';\nimport {TaskType, TodoList} from \"./components/TodoList\";\nimport {v1} from 'uuid';\nimport {Button} from \"./components/Button\";\n\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\ntype todolistsType = {\n    id: string\n    title: string\n    filter: FilterValuesType\n}\n\nexport type ObjTasksType = { [key: string]: TaskType[] }\n\nfunction App() {\n    const todolistID1 = v1();\n    const todolistID2 = v1();\n\n    const [todolist, setTodolist] = useState<todolistsType[]>([\n        {id: todolistID1, title: 'What to Learn', filter: 'all'},\n        {id: todolistID2, title: 'What to Buy', filter: 'all'},\n    ])\n    let [tasks, setTasks] = useState<ObjTasksType>({\n        [todolistID1]: [\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\n            {id: v1(), title: \"JS\", isDone: true},\n            {id: v1(), title: \"ReactJS\", isDone: false},\n            {id: v1(), title: \"Rest API\", isDone: false},\n            {id: v1(), title: \"GraphQL\", isDone: false},\n        ],\n        [todolistID2]: [\n            {id: v1(), title: \"Bread\", isDone: true},\n            {id: v1(), title: \"Beer\", isDone: true},\n            {id: v1(), title: \"Water\", isDone: true},\n            {id: v1(), title: \"Meat\", isDone: true},\n            {id: v1(), title: \"Milk\", isDone: false},\n        ]\n    });\n\n    function removeTask(todolistID: string, id: string) {\n        setTasks({...tasks, [todolistID]: tasks[todolistID].filter(t => t.id !== id)})\n    }\n\n    function addTask(todolistID: string, title: string) {\n        setTasks({...tasks, [todolistID]: [{id: v1(), title: title, isDone: false}, ...tasks[todolistID]]})\n    }\n\n    function changeStatus(todolistID: string, taskId: string, isDone: boolean) {\n        setTasks({...tasks, [todolistID]: tasks[todolistID].map(t => t.id === taskId ? {...t, isDone: isDone} : t)})\n    }\n\n    function changeFilter(todolistID: string, value: FilterValuesType) {\n        setTodolist(todolist.map(t => t.id === todolistID ? {...t, filter: value} : t))\n    }\n\n    const changeTaskTitle = (todolistID: string, taskId: string, newTitle: string) => {\n        setTasks({...tasks, [todolistID]: tasks[todolistID].map(t => t.id === taskId ? {...t, title: newTitle} : t)})\n    }\n\n    const changeTitleTodolist = (todolistID: string, newTitle: string) => {\n        setTodolist(todolist.map(tl => tl.id === todolistID ? {...tl, title: newTitle} : tl))\n    }\n\n    const deleteTodolist = (todolistID: string) => {\n        setTodolist(todolist.filter(t => t.id !== todolistID))\n    }\n\n    const addTodolist = () => {\n        const newTodolistTitle = prompt('Todolist Name');\n        if (newTodolistTitle) {\n            const newTodolistID = v1();\n            setTasks({...tasks, [newTodolistID]: []})\n            setTodolist([...todolist, {id: newTodolistID, title: newTodolistTitle, filter: 'all'}])\n        } else {\n            alert('Error! Name required!');\n        }\n    }\n    console.log(React.version)\n    return (\n        <div className=\"App\">\n            {todolist.map(tl => {\n                let tasksForTodolist = tasks[tl.id];\n                if (tl.filter === \"active\") {\n                    tasksForTodolist = tasks[tl.id].filter(t => !t.isDone);\n                }\n                if (tl.filter === \"completed\") {\n                    tasksForTodolist = tasks[tl.id].filter(t => t.isDone);\n                }\n\n                return (\n                    <TodoList title={tl.title}\n                              key={tl.id}\n                              todolistID={tl.id}\n                              tasks={tasksForTodolist}\n                              removeTask={removeTask}\n                              changeFilter={changeFilter}\n                              addTask={addTask}\n                              changeTaskStatus={changeStatus}\n                              changeTaskTitle={changeTaskTitle}\n                              filter={tl.filter}\n                              deleteTodolist={deleteTodolist}\n                              changeTitleTodolist={changeTitleTodolist}\n                    />\n                );\n            })}\n\n            <Button title={'Add new list'}\n                    className={'addButton'}\n                    callback={addTodolist}/>\n            <span>{React.version}</span>\n        </div>\n    );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"activeFilter\":\"TodoList_activeFilter__1DKYy\",\"error\":\"TodoList_error__2LNBJ\",\"inputWrapper\":\"TodoList_inputWrapper__2q5ii\",\"errorInput\":\"TodoList_errorInput__2OKT9\",\"done\":\"TodoList_done__2xzE1\",\"list\":\"TodoList_list__2nlrB\"};"],"sourceRoot":""}