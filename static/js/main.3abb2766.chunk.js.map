{"version":3,"sources":["components/EditableSpan.tsx","components/AddItemForm.tsx","components/TodoList.tsx","App.tsx","reportWebVitals.ts","index.tsx","components/TodoList.module.css","components/EditableSpan.module.css"],"names":["EditableSpan","title","callback","useState","editMode","setEditMode","inputValue","setInputValue","activateViewMode","TextField","className","s","input","size","variant","value","onBlur","onChange","e","currentTarget","onKeyPress","key","autoFocus","onDoubleClick","AddItemForm","titleList","setTitle","error","setError","addTask","trim","id","label","helperText","IconButton","onClick","color","AddCircle","TodoList","tasks","filter","todolistID","props","taskList","map","t","isDone","done","removeTask","Delete","Checkbox","changeTaskStatus","checked","changeTaskTitle","filterChangeFunction","changeFilter","styleAll","styleActive","styleCompleted","changeTitleTodolist","deleteTodolist","DeleteForever","tasksWrapper","Button","filterBtn","App","todolistID1","v1","todolistID2","todolist","setTodolist","setTasks","changeStatus","taskId","newTitle","tl","todolistList","tasksForTodolist","Grid","item","Paper","elevation","AppBar","position","Toolbar","edge","aria-label","sx","mr","Typography","component","flexGrow","Container","fixed","container","newTodolistID","spacing","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","StyledEngineProvider","injectFirst","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.3abb2766.chunk.js","sourcesContent":["import React, {ChangeEvent, useState, KeyboardEvent} from \"react\";\r\nimport {TextField} from \"@mui/material\";\r\nimport s from './EditableSpan.module.css';\r\n\r\ntype editableSpan = {\r\n    title: string\r\n    callback: (newTitle: string) => void\r\n}\r\n\r\nexport function EditableSpan({title, callback}: editableSpan) {\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [inputValue, setInputValue] = useState<string>('')\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setInputValue(title);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        callback(inputValue);\r\n    }\r\n    const onEnterAdd = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (e.key === 'Enter') {\r\n            activateViewMode();\r\n        }\r\n    }\r\n    const onChangeInputValue = (e: ChangeEvent<HTMLInputElement>) => setInputValue(e.currentTarget.value);\r\n\r\n    return (\r\n        editMode\r\n            ?\r\n            <TextField className={s.input}\r\n                       size={\"small\"}\r\n                       variant={\"standard\"}\r\n                       value={inputValue}\r\n                       onBlur={activateViewMode}\r\n                       onChange={onChangeInputValue}\r\n                       onKeyPress={onEnterAdd}\r\n                       autoFocus/>\r\n            :\r\n            <span onDoubleClick={activateEditMode}> {title} </span>\r\n    );\r\n}","import React, {ChangeEvent, KeyboardEvent, useState} from \"react\";\r\nimport s from \"./AddItemForm.module.css\";\r\nimport {Button, IconButton, TextField} from \"@mui/material\";\r\nimport {AddBox, AddCircle} from \"@mui/icons-material\";\r\n\r\ntype addItemPropsType = {\r\n    titleList?: string\r\n    callback: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm({callback, titleList}: addItemPropsType) {\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>('')\r\n\r\n    //Functions\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null);\r\n        if (e.key === 'Enter') {\r\n            addTask();\r\n        }\r\n    }\r\n    const addTask = () => {\r\n        if (title.trim() !== \"\") {\r\n            callback(title.trim());\r\n            setTitle(\"\");\r\n        } else {\r\n            setError('Title is required!');\r\n        }\r\n    }\r\n\r\n    // Styles\r\n    const styleBtn = {\r\n        minWidth: '40px',\r\n        height: '48px',\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>{titleList}</h3>\r\n            <TextField\r\n                error={!!error}\r\n                id={'standard-basic'}\r\n                label={'Insert name'}\r\n                variant={\"standard\"}\r\n                value={title}\r\n                onChange={onChangeHandler}\r\n                onKeyPress={onKeyPressHandler}\r\n                helperText={error}\r\n            />\r\n            {/*<Button style={styleBtn} variant={\"contained\"} size={\"small\"} onClick={addTask}>+</Button>*/}\r\n            <IconButton onClick={addTask} color={'primary'}>\r\n                <AddCircle/>\r\n            </IconButton>\r\n        </div>\r\n    );\r\n}","import React, {ChangeEvent} from 'react';\r\nimport {Button, Checkbox, IconButton} from \"@mui/material\";\r\nimport {FilterValuesType} from '../App';\r\nimport {EditableSpan} from \"./EditableSpan\";\r\nimport {AddItemForm} from \"./AddItemForm\";\r\nimport s from './TodoList.module.css';\r\nimport {Backspace, Delete, DeleteForever} from \"@mui/icons-material\";\r\n\r\nexport type TaskType = {\r\n    id: string\r\n    title: string\r\n    isDone: boolean\r\n}\r\n\r\ntype PropsType = {\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    filter: FilterValuesType\r\n    todolistID: string\r\n    removeTask: (todolistID: string, taskId: string) => void\r\n    changeFilter: (todolistID: string, value: FilterValuesType) => void\r\n    addTask: (todolistID: string, title: string) => void\r\n    changeTaskStatus: (todolistID: string, taskId: string, isDone: boolean) => void\r\n    deleteTodolist: (todolistID: string) => void\r\n    changeTaskTitle: (todolistID: string, taskId: string, newTitle: string) => void\r\n    changeTitleTodolist: (todolistID: string, newTitle: string) => void\r\n}\r\n\r\nexport function TodoList({tasks, filter, todolistID, ...props}: PropsType) {\r\n    //Create lists\r\n    const taskList = tasks.map(t => {\r\n        const onClickHandler = () => props.removeTask(todolistID, t.id)\r\n        const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n            props.changeTaskStatus(todolistID, t.id, e.currentTarget.checked);\r\n        }\r\n\r\n        const onChangeTitleHandler = (inputValue: string) => {\r\n            props.changeTaskTitle(todolistID, t.id, inputValue);\r\n        }\r\n\r\n        return <div key={t.id} className={t.isDone ? s.done : s.tasks}>\r\n            <IconButton size={\"small\"} onClick={onClickHandler}>\r\n                <Delete/>\r\n            </IconButton>\r\n            <Checkbox color={'info'}\r\n                      onChange={onChangeHandler}\r\n                      checked={t.isDone}/>\r\n            <EditableSpan title={t.title} callback={onChangeTitleHandler}/>\r\n\r\n        </div>\r\n    })\r\n\r\n    //Funcitons\r\n    const onClickRemoveTodolist = () => props.deleteTodolist(todolistID);\r\n    const filterChangeFunction = (filter: FilterValuesType) => props.changeFilter(todolistID, filter);\r\n    const onChangeTitleTodolistHandler = (inputValue: string) => {\r\n        props.changeTitleTodolist(todolistID, inputValue);\r\n    }\r\n    const callBackAddItem = (title: string) => {\r\n        props.addTask(todolistID, title);\r\n    }\r\n\r\n    const filterAll = () => filterChangeFunction('all');\r\n    const filterActive = () => filterChangeFunction('active');\r\n    const filterCompleted = () => filterChangeFunction('completed');\r\n\r\n    //Styles\r\n    const styleAll = filter === 'all' ? 'contained' : 'text';\r\n    const styleActive = filter === 'active' ? 'contained' : 'text';\r\n    const styleCompleted = filter === 'completed' ? 'contained' : 'text';\r\n\r\n    return (\r\n        <div>\r\n            <h3 className={s.title}>\r\n                <EditableSpan title={props.title} callback={onChangeTitleTodolistHandler}/>\r\n                <IconButton onClick={onClickRemoveTodolist}>\r\n                    <DeleteForever color={'error'}/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm callback={callBackAddItem}/>\r\n            <div className={s.tasksWrapper}>{taskList}</div>\r\n            <div>\r\n                <Button title={'All'}\r\n                        className={s.filterBtn}\r\n                        color={\"success\"}\r\n                        variant={styleAll}\r\n                        onClick={filterAll}>All\r\n                </Button>\r\n\r\n                <Button title={'Active'}\r\n                        className={s.filterBtn}\r\n                        color={\"success\"}\r\n                        variant={styleActive}\r\n                        onClick={filterActive}>Active\r\n                </Button>\r\n\r\n                <Button title={'Completed'}\r\n                        className={s.filterBtn}\r\n                        color={\"success\"}\r\n                        variant={styleCompleted}\r\n                        onClick={filterCompleted}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {TaskType, TodoList} from \"./components/TodoList\";\nimport {v1} from 'uuid';\nimport {AddItemForm} from \"./components/AddItemForm\";\nimport AppBar from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\nimport IconButton from '@mui/material/IconButton';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport {Container, Grid, Paper} from \"@mui/material\";\n\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\";\ntype todolistsType = {\n    id: string\n    title: string\n    filter: FilterValuesType\n}\n\nexport type ObjTasksType = { [key: string]: TaskType[] }\n\nfunction App() {\n    const todolistID1 = v1();\n    const todolistID2 = v1();\n\n    const [todolist, setTodolist] = useState<todolistsType[]>([\n        {id: todolistID1, title: 'What to Learn', filter: 'all'},\n        {id: todolistID2, title: 'What to Buy', filter: 'all'},\n    ])\n    let [tasks, setTasks] = useState<ObjTasksType>({\n        [todolistID1]: [\n            {id: v1(), title: \"HTML&CSS\", isDone: true},\n            {id: v1(), title: \"JS\", isDone: true},\n            {id: v1(), title: \"ReactJS\", isDone: false},\n            {id: v1(), title: \"Rest API\", isDone: false},\n            {id: v1(), title: \"GraphQL\", isDone: false},\n        ],\n        [todolistID2]: [\n            {id: v1(), title: \"Bread\", isDone: true},\n            {id: v1(), title: \"Beer\", isDone: true},\n            {id: v1(), title: \"Water\", isDone: true},\n            {id: v1(), title: \"Meat\", isDone: false},\n            {id: v1(), title: \"Milk\", isDone: false},\n        ]\n    });\n\n    // useEffect(() => {\n    //     let localTasksString = localStorage.getItem('tasks');\n    //     if (localTasksString) {\n    //         let newTasksValue = JSON.parse(localTasksString);\n    //         setTasks(newTasksValue);\n    //     }\n    //\n    //     let localTodolistsString = localStorage.getItem('todolists');\n    //     if (localTodolistsString) {\n    //         let newTodolistsValue = JSON.parse(localTodolistsString);\n    //         setTodolist(newTodolistsValue);\n    //     }\n    // }, [])\n    // useEffect(() => {\n    //     localStorage.setItem('tasks', JSON.stringify(tasks));\n    // }, [tasks])\n    // useEffect(() => {\n    //     localStorage.setItem('todolists', JSON.stringify(todolist));\n    // }, [todolist])\n\n    function removeTask(todolistID: string, id: string) {\n        setTasks({...tasks, [todolistID]: tasks[todolistID].filter(t => t.id !== id)})\n    }\n\n    function addTask(todolistID: string, title: string) {\n        setTasks({...tasks, [todolistID]: [{id: v1(), title: title, isDone: false}, ...tasks[todolistID]]});\n    }\n\n    function changeStatus(todolistID: string, taskId: string, isDone: boolean) {\n        setTasks({...tasks, [todolistID]: tasks[todolistID].map(t => t.id === taskId ? {...t, isDone: isDone} : t)})\n    }\n\n    function changeFilter(todolistID: string, value: FilterValuesType) {\n        setTodolist(todolist.map(t => t.id === todolistID ? {...t, filter: value} : t))\n    }\n\n    const changeTaskTitle = (todolistID: string, taskId: string, newTitle: string) => {\n        setTasks({...tasks, [todolistID]: tasks[todolistID].map(t => t.id === taskId ? {...t, title: newTitle} : t)})\n    }\n    const changeTitleTodolist = (todolistID: string, newTitle: string) => {\n        setTodolist(todolist.map(tl => tl.id === todolistID ? {...tl, title: newTitle} : tl))\n    }\n    const deleteTodolist = (todolistID: string) => {\n        setTodolist(todolist.filter(t => t.id !== todolistID))\n    }\n    const addTodolist = (title: string) => {\n        const newTodolistID = v1();\n        setTasks({...tasks, [newTodolistID]: []})\n        setTodolist([...todolist, {id: newTodolistID, title: title, filter: 'all'}])\n    }\n\n    const todolistList = todolist.map(tl => {\n        let tasksForTodolist = tasks[tl.id];\n        if (tl.filter === \"active\") {\n            tasksForTodolist = tasks[tl.id].filter(t => !t.isDone);\n        }\n        if (tl.filter === \"completed\") {\n            tasksForTodolist = tasks[tl.id].filter(t => t.isDone);\n        }\n\n        return (\n            <Grid item>\n                <Paper className={'todolistWrapper'} elevation={5}>\n                    <TodoList title={tl.title}\n                              key={tl.id}\n                              todolistID={tl.id}\n                              tasks={tasksForTodolist}\n                              removeTask={removeTask}\n                              changeFilter={changeFilter}\n                              addTask={addTask}\n                              changeTaskStatus={changeStatus}\n                              changeTaskTitle={changeTaskTitle}\n                              filter={tl.filter}\n                              deleteTodolist={deleteTodolist}\n                              changeTitleTodolist={changeTitleTodolist}\n                    />\n                </Paper>\n            </Grid>\n        );\n    })\n\n    return (\n        <div className=\"App\">\n            <AppBar position=\"static\">\n                <Toolbar>\n                    <IconButton\n                        size=\"large\"\n                        edge=\"start\"\n                        color=\"inherit\"\n                        aria-label=\"menu\"\n                        sx={{mr: 2}}>\n                        <MenuIcon/>\n                    </IconButton>\n                    <Typography variant=\"h6\" component=\"div\" sx={{flexGrow: 1}}>\n                        Todolist\n                    </Typography>\n                    <Button color=\"inherit\">Login</Button>\n                </Toolbar>\n            </AppBar>\n\n            <Container fixed>\n                <Grid className={'addTodolistWrapper'} container>\n                    <AddItemForm titleList={'Add list'} callback={addTodolist}/>\n                </Grid>\n\n                <Grid container spacing={4}>\n                    {todolistList}\n                </Grid>\n            </Container>\n        </div>\n    );\n}\n\nexport default App;","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {StyledEngineProvider} from '@mui/material';\n\nReactDOM.render(\n    <React.StrictMode>\n        <StyledEngineProvider injectFirst>\n            <App/>\n        </StyledEngineProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tasksWrapper\":\"TodoList_tasksWrapper__2T3Fx\",\"done\":\"TodoList_done__2xzE1\",\"tasks\":\"TodoList_tasks__VZNFe\",\"filterBtn\":\"TodoList_filterBtn__1zjB6\",\"title\":\"TodoList_title__1CgMk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"EditableSpan_input__2jJaF\"};"],"sourceRoot":""}